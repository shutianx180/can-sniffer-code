
can-sniffer-v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cec  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002dac  08002dac  00003dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ddc  08002ddc  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002ddc  08002ddc  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002ddc  08002ddc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ddc  08002ddc  00003ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002de0  08002de0  00003de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002de4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  20000010  08002df0  00004010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08002df0  000043a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009996  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb4  00000000  00000000  0000d9ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  0000f980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000684  00000000  00000000  00010248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d0b  00000000  00000000  000108cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b278  00000000  00000000  000295d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e121  00000000  00000000  0003484f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2970  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d98  00000000  00000000  000c29b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000c474c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d94 	.word	0x08002d94

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08002d94 	.word	0x08002d94

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fb5b 	bl	80008e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f857 	bl	80002dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f955 	bl	80004dc <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000232:	f000 f92d 	bl	8000490 <MX_USB_PCD_Init>
  MX_CAN_Init();
 8000236:	f000 f8b7 	bl	80003a8 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  TxHeader.StdId = 0x123;
 800023a:	4b24      	ldr	r3, [pc, #144]	@ (80002cc <main+0xac>)
 800023c:	2224      	movs	r2, #36	@ 0x24
 800023e:	32ff      	adds	r2, #255	@ 0xff
 8000240:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8000242:	4b22      	ldr	r3, [pc, #136]	@ (80002cc <main+0xac>)
 8000244:	2200      	movs	r2, #0
 8000246:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8000248:	4b20      	ldr	r3, [pc, #128]	@ (80002cc <main+0xac>)
 800024a:	2200      	movs	r2, #0
 800024c:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 800024e:	4b1f      	ldr	r3, [pc, #124]	@ (80002cc <main+0xac>)
 8000250:	2208      	movs	r2, #8
 8000252:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000254:	4b1d      	ldr	r3, [pc, #116]	@ (80002cc <main+0xac>)
 8000256:	2200      	movs	r2, #0
 8000258:	751a      	strb	r2, [r3, #20]
  for (int i=0; i<8; i++){
 800025a:	2300      	movs	r3, #0
 800025c:	607b      	str	r3, [r7, #4]
 800025e:	e007      	b.n	8000270 <main+0x50>
	  TxData[i] = 0;
 8000260:	4a1b      	ldr	r2, [pc, #108]	@ (80002d0 <main+0xb0>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	18d3      	adds	r3, r2, r3
 8000266:	2200      	movs	r2, #0
 8000268:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<8; i++){
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	3301      	adds	r3, #1
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2b07      	cmp	r3, #7
 8000274:	ddf4      	ble.n	8000260 <main+0x40>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  for(int i=0; i<8; i++){
 8000276:	2300      	movs	r3, #0
 8000278:	603b      	str	r3, [r7, #0]
 800027a:	e011      	b.n	80002a0 <main+0x80>
	  	  TxData[i] = (TxData[i] + (1+i)) & 0xFF;
 800027c:	4a14      	ldr	r2, [pc, #80]	@ (80002d0 <main+0xb0>)
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	18d3      	adds	r3, r2, r3
 8000282:	781a      	ldrb	r2, [r3, #0]
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	b2db      	uxtb	r3, r3
 8000288:	18d3      	adds	r3, r2, r3
 800028a:	b2db      	uxtb	r3, r3
 800028c:	3301      	adds	r3, #1
 800028e:	b2d9      	uxtb	r1, r3
 8000290:	4a0f      	ldr	r2, [pc, #60]	@ (80002d0 <main+0xb0>)
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	18d3      	adds	r3, r2, r3
 8000296:	1c0a      	adds	r2, r1, #0
 8000298:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<8; i++){
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	3301      	adds	r3, #1
 800029e:	603b      	str	r3, [r7, #0]
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	2b07      	cmp	r3, #7
 80002a4:	ddea      	ble.n	800027c <main+0x5c>
	    }
//	  TxData[0] ++; 				//increment the first byte
//	  TxData[7] --;					//increment the last byte

	  //mandatory to look for a free Tx mailbox
	  while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0);
 80002a6:	46c0      	nop			@ (mov r8, r8)
 80002a8:	4b0a      	ldr	r3, [pc, #40]	@ (80002d4 <main+0xb4>)
 80002aa:	0018      	movs	r0, r3
 80002ac:	f000 fe84 	bl	8000fb8 <HAL_CAN_GetTxMailboxesFreeLevel>
 80002b0:	1e03      	subs	r3, r0, #0
 80002b2:	d0f9      	beq.n	80002a8 <main+0x88>
	  if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80002b4:	4b08      	ldr	r3, [pc, #32]	@ (80002d8 <main+0xb8>)
 80002b6:	4a06      	ldr	r2, [pc, #24]	@ (80002d0 <main+0xb0>)
 80002b8:	4904      	ldr	r1, [pc, #16]	@ (80002cc <main+0xac>)
 80002ba:	4806      	ldr	r0, [pc, #24]	@ (80002d4 <main+0xb4>)
 80002bc:	f000 fdaa 	bl	8000e14 <HAL_CAN_AddTxMessage>
 80002c0:	1e03      	subs	r3, r0, #0
 80002c2:	d0d8      	beq.n	8000276 <main+0x56>
		  //transmission request error
		  Error_Handler();
 80002c4:	f000 f9e8 	bl	8000698 <Error_Handler>
	  for(int i=0; i<8; i++){
 80002c8:	e7d5      	b.n	8000276 <main+0x56>
 80002ca:	46c0      	nop			@ (mov r8, r8)
 80002cc:	20000330 	.word	0x20000330
 80002d0:	20000364 	.word	0x20000364
 80002d4:	2000002c 	.word	0x2000002c
 80002d8:	20000374 	.word	0x20000374

080002dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002dc:	b590      	push	{r4, r7, lr}
 80002de:	b099      	sub	sp, #100	@ 0x64
 80002e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e2:	242c      	movs	r4, #44	@ 0x2c
 80002e4:	193b      	adds	r3, r7, r4
 80002e6:	0018      	movs	r0, r3
 80002e8:	2334      	movs	r3, #52	@ 0x34
 80002ea:	001a      	movs	r2, r3
 80002ec:	2100      	movs	r1, #0
 80002ee:	f002 fd25 	bl	8002d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f2:	231c      	movs	r3, #28
 80002f4:	18fb      	adds	r3, r7, r3
 80002f6:	0018      	movs	r0, r3
 80002f8:	2310      	movs	r3, #16
 80002fa:	001a      	movs	r2, r3
 80002fc:	2100      	movs	r1, #0
 80002fe:	f002 fd1d 	bl	8002d3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000302:	003b      	movs	r3, r7
 8000304:	0018      	movs	r0, r3
 8000306:	231c      	movs	r3, #28
 8000308:	001a      	movs	r2, r3
 800030a:	2100      	movs	r1, #0
 800030c:	f002 fd16 	bl	8002d3c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000310:	0021      	movs	r1, r4
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2222      	movs	r2, #34	@ 0x22
 8000316:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2201      	movs	r2, #1
 800031c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2201      	movs	r2, #1
 8000322:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2210      	movs	r2, #16
 8000328:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2202      	movs	r2, #2
 800032e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2280      	movs	r2, #128	@ 0x80
 8000334:	0212      	lsls	r2, r2, #8
 8000336:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2280      	movs	r2, #128	@ 0x80
 800033c:	0352      	lsls	r2, r2, #13
 800033e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2200      	movs	r2, #0
 8000344:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000346:	187b      	adds	r3, r7, r1
 8000348:	0018      	movs	r0, r3
 800034a:	f001 fef1 	bl	8002130 <HAL_RCC_OscConfig>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000352:	f000 f9a1 	bl	8000698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000356:	211c      	movs	r1, #28
 8000358:	187b      	adds	r3, r7, r1
 800035a:	2207      	movs	r2, #7
 800035c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2202      	movs	r2, #2
 8000362:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2200      	movs	r2, #0
 800036e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000370:	187b      	adds	r3, r7, r1
 8000372:	2101      	movs	r1, #1
 8000374:	0018      	movs	r0, r3
 8000376:	f002 fa61 	bl	800283c <HAL_RCC_ClockConfig>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800037e:	f000 f98b 	bl	8000698 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000382:	003b      	movs	r3, r7
 8000384:	2280      	movs	r2, #128	@ 0x80
 8000386:	0292      	lsls	r2, r2, #10
 8000388:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800038a:	003b      	movs	r3, r7
 800038c:	2200      	movs	r2, #0
 800038e:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000390:	003b      	movs	r3, r7
 8000392:	0018      	movs	r0, r3
 8000394:	f002 fb9e 	bl	8002ad4 <HAL_RCCEx_PeriphCLKConfig>
 8000398:	1e03      	subs	r3, r0, #0
 800039a:	d001      	beq.n	80003a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800039c:	f000 f97c 	bl	8000698 <Error_Handler>
  }
}
 80003a0:	46c0      	nop			@ (mov r8, r8)
 80003a2:	46bd      	mov	sp, r7
 80003a4:	b019      	add	sp, #100	@ 0x64
 80003a6:	bd90      	pop	{r4, r7, pc}

080003a8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b08a      	sub	sp, #40	@ 0x28
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;							//points to CAN peripheral
 80003ae:	4b36      	ldr	r3, [pc, #216]	@ (8000488 <MX_CAN_Init+0xe0>)
 80003b0:	4a36      	ldr	r2, [pc, #216]	@ (800048c <MX_CAN_Init+0xe4>)
 80003b2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;						//sets CAN bitrate
 80003b4:	4b34      	ldr	r3, [pc, #208]	@ (8000488 <MX_CAN_Init+0xe0>)
 80003b6:	2206      	movs	r2, #6
 80003b8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80003ba:	4b33      	ldr	r3, [pc, #204]	@ (8000488 <MX_CAN_Init+0xe0>)
 80003bc:	2280      	movs	r2, #128	@ 0x80
 80003be:	05d2      	lsls	r2, r2, #23
 80003c0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;		//default
 80003c2:	4b31      	ldr	r3, [pc, #196]	@ (8000488 <MX_CAN_Init+0xe0>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;			//BS1
 80003c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000488 <MX_CAN_Init+0xe0>)
 80003ca:	22b0      	movs	r2, #176	@ 0xb0
 80003cc:	0312      	lsls	r2, r2, #12
 80003ce:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;				//BS2
 80003d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000488 <MX_CAN_Init+0xe0>)
 80003d2:	2280      	movs	r2, #128	@ 0x80
 80003d4:	0392      	lsls	r2, r2, #14
 80003d6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;		//no timestamp events??
 80003d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000488 <MX_CAN_Init+0xe0>)
 80003da:	2200      	movs	r2, #0
 80003dc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;				//don't recover automatically from bus-off (might need to change)
 80003de:	4b2a      	ldr	r3, [pc, #168]	@ (8000488 <MX_CAN_Init+0xe0>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;				//wake up from sleep
 80003e4:	4b28      	ldr	r3, [pc, #160]	@ (8000488 <MX_CAN_Init+0xe0>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;		//won't retransmit failed messages (Not applicable for can sniffer)
 80003ea:	4b27      	ldr	r3, [pc, #156]	@ (8000488 <MX_CAN_Init+0xe0>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;		//FIFO overwrite allowed
 80003f0:	4b25      	ldr	r3, [pc, #148]	@ (8000488 <MX_CAN_Init+0xe0>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;		//priority in order of request not priority
 80003f6:	4b24      	ldr	r3, [pc, #144]	@ (8000488 <MX_CAN_Init+0xe0>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003fc:	4b22      	ldr	r3, [pc, #136]	@ (8000488 <MX_CAN_Init+0xe0>)
 80003fe:	0018      	movs	r0, r3
 8000400:	f000 fad2 	bl	80009a8 <HAL_CAN_Init>
 8000404:	1e03      	subs	r3, r0, #0
 8000406:	d001      	beq.n	800040c <MX_CAN_Init+0x64>
  {
    Error_Handler();
 8000408:	f000 f946 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  sFilterConfig.FilterBank = 0;
 800040c:	003b      	movs	r3, r7
 800040e:	2200      	movs	r2, #0
 8000410:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000412:	003b      	movs	r3, r7
 8000414:	2200      	movs	r2, #0
 8000416:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000418:	003b      	movs	r3, r7
 800041a:	2201      	movs	r2, #1
 800041c:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800041e:	003b      	movs	r3, r7
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000424:	003b      	movs	r3, r7
 8000426:	2200      	movs	r2, #0
 8000428:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800042a:	003b      	movs	r3, r7
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000430:	003b      	movs	r3, r7
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000436:	003b      	movs	r3, r7
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800043c:	003b      	movs	r3, r7
 800043e:	2201      	movs	r2, #1
 8000440:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000442:	003b      	movs	r3, r7
 8000444:	220e      	movs	r2, #14
 8000446:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK){
 8000448:	003a      	movs	r2, r7
 800044a:	4b0f      	ldr	r3, [pc, #60]	@ (8000488 <MX_CAN_Init+0xe0>)
 800044c:	0011      	movs	r1, r2
 800044e:	0018      	movs	r0, r3
 8000450:	f000 fba8 	bl	8000ba4 <HAL_CAN_ConfigFilter>
 8000454:	1e03      	subs	r3, r0, #0
 8000456:	d001      	beq.n	800045c <MX_CAN_Init+0xb4>
	  //filter configuration error
	  Error_Handler();
 8000458:	f000 f91e 	bl	8000698 <Error_Handler>
  }
  //Starting CAN peripheral
  if (HAL_CAN_Start(&hcan) != HAL_OK){
 800045c:	4b0a      	ldr	r3, [pc, #40]	@ (8000488 <MX_CAN_Init+0xe0>)
 800045e:	0018      	movs	r0, r3
 8000460:	f000 fc92 	bl	8000d88 <HAL_CAN_Start>
 8000464:	1e03      	subs	r3, r0, #0
 8000466:	d001      	beq.n	800046c <MX_CAN_Init+0xc4>
	  //start error
	  Error_Handler();
 8000468:	f000 f916 	bl	8000698 <Error_Handler>
  }
  //Activate CAN RX notification on FIFO0
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)){
 800046c:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <MX_CAN_Init+0xe0>)
 800046e:	2102      	movs	r1, #2
 8000470:	0018      	movs	r0, r3
 8000472:	f000 ff04 	bl	800127e <HAL_CAN_ActivateNotification>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <MX_CAN_Init+0xd6>
	  //notification error
	  Error_Handler();
 800047a:	f000 f90d 	bl	8000698 <Error_Handler>
  }

  /* USER CODE END CAN_Init 2 */

}
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	b00a      	add	sp, #40	@ 0x28
 8000484:	bd80      	pop	{r7, pc}
 8000486:	46c0      	nop			@ (mov r8, r8)
 8000488:	2000002c 	.word	0x2000002c
 800048c:	40006400 	.word	0x40006400

08000490 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000494:	4b0f      	ldr	r3, [pc, #60]	@ (80004d4 <MX_USB_PCD_Init+0x44>)
 8000496:	4a10      	ldr	r2, [pc, #64]	@ (80004d8 <MX_USB_PCD_Init+0x48>)
 8000498:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800049a:	4b0e      	ldr	r3, [pc, #56]	@ (80004d4 <MX_USB_PCD_Init+0x44>)
 800049c:	2208      	movs	r2, #8
 800049e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80004a0:	4b0c      	ldr	r3, [pc, #48]	@ (80004d4 <MX_USB_PCD_Init+0x44>)
 80004a2:	2202      	movs	r2, #2
 80004a4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80004a6:	4b0b      	ldr	r3, [pc, #44]	@ (80004d4 <MX_USB_PCD_Init+0x44>)
 80004a8:	2202      	movs	r2, #2
 80004aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80004ac:	4b09      	ldr	r3, [pc, #36]	@ (80004d4 <MX_USB_PCD_Init+0x44>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80004b2:	4b08      	ldr	r3, [pc, #32]	@ (80004d4 <MX_USB_PCD_Init+0x44>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80004b8:	4b06      	ldr	r3, [pc, #24]	@ (80004d4 <MX_USB_PCD_Init+0x44>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80004be:	4b05      	ldr	r3, [pc, #20]	@ (80004d4 <MX_USB_PCD_Init+0x44>)
 80004c0:	0018      	movs	r0, r3
 80004c2:	f001 fd17 	bl	8001ef4 <HAL_PCD_Init>
 80004c6:	1e03      	subs	r3, r0, #0
 80004c8:	d001      	beq.n	80004ce <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80004ca:	f000 f8e5 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000054 	.word	0x20000054
 80004d8:	40005c00 	.word	0x40005c00

080004dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b08b      	sub	sp, #44	@ 0x2c
 80004e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	2414      	movs	r4, #20
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	0018      	movs	r0, r3
 80004e8:	2314      	movs	r3, #20
 80004ea:	001a      	movs	r2, r3
 80004ec:	2100      	movs	r1, #0
 80004ee:	f002 fc25 	bl	8002d3c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	4b5b      	ldr	r3, [pc, #364]	@ (8000660 <MX_GPIO_Init+0x184>)
 80004f4:	695a      	ldr	r2, [r3, #20]
 80004f6:	4b5a      	ldr	r3, [pc, #360]	@ (8000660 <MX_GPIO_Init+0x184>)
 80004f8:	2180      	movs	r1, #128	@ 0x80
 80004fa:	0309      	lsls	r1, r1, #12
 80004fc:	430a      	orrs	r2, r1
 80004fe:	615a      	str	r2, [r3, #20]
 8000500:	4b57      	ldr	r3, [pc, #348]	@ (8000660 <MX_GPIO_Init+0x184>)
 8000502:	695a      	ldr	r2, [r3, #20]
 8000504:	2380      	movs	r3, #128	@ 0x80
 8000506:	031b      	lsls	r3, r3, #12
 8000508:	4013      	ands	r3, r2
 800050a:	613b      	str	r3, [r7, #16]
 800050c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800050e:	4b54      	ldr	r3, [pc, #336]	@ (8000660 <MX_GPIO_Init+0x184>)
 8000510:	695a      	ldr	r2, [r3, #20]
 8000512:	4b53      	ldr	r3, [pc, #332]	@ (8000660 <MX_GPIO_Init+0x184>)
 8000514:	2180      	movs	r1, #128	@ 0x80
 8000516:	03c9      	lsls	r1, r1, #15
 8000518:	430a      	orrs	r2, r1
 800051a:	615a      	str	r2, [r3, #20]
 800051c:	4b50      	ldr	r3, [pc, #320]	@ (8000660 <MX_GPIO_Init+0x184>)
 800051e:	695a      	ldr	r2, [r3, #20]
 8000520:	2380      	movs	r3, #128	@ 0x80
 8000522:	03db      	lsls	r3, r3, #15
 8000524:	4013      	ands	r3, r2
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b4d      	ldr	r3, [pc, #308]	@ (8000660 <MX_GPIO_Init+0x184>)
 800052c:	695a      	ldr	r2, [r3, #20]
 800052e:	4b4c      	ldr	r3, [pc, #304]	@ (8000660 <MX_GPIO_Init+0x184>)
 8000530:	2180      	movs	r1, #128	@ 0x80
 8000532:	0289      	lsls	r1, r1, #10
 8000534:	430a      	orrs	r2, r1
 8000536:	615a      	str	r2, [r3, #20]
 8000538:	4b49      	ldr	r3, [pc, #292]	@ (8000660 <MX_GPIO_Init+0x184>)
 800053a:	695a      	ldr	r2, [r3, #20]
 800053c:	2380      	movs	r3, #128	@ 0x80
 800053e:	029b      	lsls	r3, r3, #10
 8000540:	4013      	ands	r3, r2
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	4b46      	ldr	r3, [pc, #280]	@ (8000660 <MX_GPIO_Init+0x184>)
 8000548:	695a      	ldr	r2, [r3, #20]
 800054a:	4b45      	ldr	r3, [pc, #276]	@ (8000660 <MX_GPIO_Init+0x184>)
 800054c:	2180      	movs	r1, #128	@ 0x80
 800054e:	02c9      	lsls	r1, r1, #11
 8000550:	430a      	orrs	r2, r1
 8000552:	615a      	str	r2, [r3, #20]
 8000554:	4b42      	ldr	r3, [pc, #264]	@ (8000660 <MX_GPIO_Init+0x184>)
 8000556:	695a      	ldr	r2, [r3, #20]
 8000558:	2380      	movs	r3, #128	@ 0x80
 800055a:	02db      	lsls	r3, r3, #11
 800055c:	4013      	ands	r3, r2
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000562:	23c0      	movs	r3, #192	@ 0xc0
 8000564:	01db      	lsls	r3, r3, #7
 8000566:	483f      	ldr	r0, [pc, #252]	@ (8000664 <MX_GPIO_Init+0x188>)
 8000568:	2200      	movs	r2, #0
 800056a:	0019      	movs	r1, r3
 800056c:	f001 fc7e 	bl	8001e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000570:	193b      	adds	r3, r7, r4
 8000572:	2280      	movs	r2, #128	@ 0x80
 8000574:	0192      	lsls	r2, r2, #6
 8000576:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000578:	193b      	adds	r3, r7, r4
 800057a:	2284      	movs	r2, #132	@ 0x84
 800057c:	0392      	lsls	r2, r2, #14
 800057e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	193b      	adds	r3, r7, r4
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000586:	193b      	adds	r3, r7, r4
 8000588:	4a37      	ldr	r2, [pc, #220]	@ (8000668 <MX_GPIO_Init+0x18c>)
 800058a:	0019      	movs	r1, r3
 800058c:	0010      	movs	r0, r2
 800058e:	f001 faf5 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_NSS_Pin SD_SCK_Pin SD_MISO_Pin SD_MOSI_Pin */
  GPIO_InitStruct.Pin = SD_NSS_Pin|SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8000592:	193b      	adds	r3, r7, r4
 8000594:	22f0      	movs	r2, #240	@ 0xf0
 8000596:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000598:	193b      	adds	r3, r7, r4
 800059a:	2202      	movs	r2, #2
 800059c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a4:	193b      	adds	r3, r7, r4
 80005a6:	2203      	movs	r2, #3
 80005a8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80005aa:	193b      	adds	r3, r7, r4
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	193a      	adds	r2, r7, r4
 80005b2:	2390      	movs	r3, #144	@ 0x90
 80005b4:	05db      	lsls	r3, r3, #23
 80005b6:	0011      	movs	r1, r2
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 fadf 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SCL_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin;
 80005be:	0021      	movs	r1, r4
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2280      	movs	r2, #128	@ 0x80
 80005c4:	00d2      	lsls	r2, r2, #3
 80005c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c8:	000c      	movs	r4, r1
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2202      	movs	r2, #2
 80005ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	2203      	movs	r2, #3
 80005da:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	2205      	movs	r2, #5
 80005e0:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(LCD_SCL_GPIO_Port, &GPIO_InitStruct);
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	4a1f      	ldr	r2, [pc, #124]	@ (8000664 <MX_GPIO_Init+0x188>)
 80005e6:	0019      	movs	r1, r3
 80005e8:	0010      	movs	r0, r2
 80005ea:	f001 fac7 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CSB_Pin LCD_MOSI_Pin */
  GPIO_InitStruct.Pin = LCD_CSB_Pin|LCD_MOSI_Pin;
 80005ee:	0021      	movs	r1, r4
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2290      	movs	r2, #144	@ 0x90
 80005f4:	0212      	lsls	r2, r2, #8
 80005f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f8:	000c      	movs	r4, r1
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	2202      	movs	r2, #2
 80005fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	193b      	adds	r3, r7, r4
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000606:	193b      	adds	r3, r7, r4
 8000608:	2203      	movs	r2, #3
 800060a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000612:	193b      	adds	r3, r7, r4
 8000614:	4a13      	ldr	r2, [pc, #76]	@ (8000664 <MX_GPIO_Init+0x188>)
 8000616:	0019      	movs	r1, r3
 8000618:	0010      	movs	r0, r2
 800061a:	f001 faaf 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RST_Pin;
 800061e:	0021      	movs	r1, r4
 8000620:	187b      	adds	r3, r7, r1
 8000622:	22c0      	movs	r2, #192	@ 0xc0
 8000624:	01d2      	lsls	r2, r2, #7
 8000626:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2201      	movs	r2, #1
 800062c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063a:	187b      	adds	r3, r7, r1
 800063c:	4a09      	ldr	r2, [pc, #36]	@ (8000664 <MX_GPIO_Init+0x188>)
 800063e:	0019      	movs	r1, r3
 8000640:	0010      	movs	r0, r2
 8000642:	f001 fa9b 	bl	8001b7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	2007      	movs	r0, #7
 800064c:	f001 f902 	bl	8001854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000650:	2007      	movs	r0, #7
 8000652:	f001 f914 	bl	800187e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000656:	46c0      	nop			@ (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b00b      	add	sp, #44	@ 0x2c
 800065c:	bd90      	pop	{r4, r7, pc}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	40021000 	.word	0x40021000
 8000664:	48000400 	.word	0x48000400
 8000668:	48000800 	.word	0x48000800

0800066c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
  void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle){
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	  //get RX message
	  if(HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8000676:	4a07      	ldr	r2, [pc, #28]	@ (8000694 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	2100      	movs	r1, #0
 800067c:	f000 fcd4 	bl	8001028 <HAL_CAN_GetRxMessage>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d001      	beq.n	8000688 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
		  //reception error
		  Error_Handler();
 8000684:	f000 f808 	bl	8000698 <Error_Handler>
	  }
  }
 8000688:	46c0      	nop			@ (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	b002      	add	sp, #8
 800068e:	bd80      	pop	{r7, pc}
 8000690:	2000036c 	.word	0x2000036c
 8000694:	20000348 	.word	0x20000348

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	46c0      	nop			@ (mov r8, r8)
 80006a2:	e7fd      	b.n	80006a0 <Error_Handler+0x8>

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006aa:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <HAL_MspInit+0x54>)
 80006ac:	699a      	ldr	r2, [r3, #24]
 80006ae:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <HAL_MspInit+0x54>)
 80006b0:	2101      	movs	r1, #1
 80006b2:	430a      	orrs	r2, r1
 80006b4:	619a      	str	r2, [r3, #24]
 80006b6:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <HAL_MspInit+0x54>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	2201      	movs	r2, #1
 80006bc:	4013      	ands	r3, r2
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <HAL_MspInit+0x54>)
 80006c4:	69da      	ldr	r2, [r3, #28]
 80006c6:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <HAL_MspInit+0x54>)
 80006c8:	2180      	movs	r1, #128	@ 0x80
 80006ca:	0549      	lsls	r1, r1, #21
 80006cc:	430a      	orrs	r2, r1
 80006ce:	61da      	str	r2, [r3, #28]
 80006d0:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <HAL_MspInit+0x54>)
 80006d2:	69da      	ldr	r2, [r3, #28]
 80006d4:	2380      	movs	r3, #128	@ 0x80
 80006d6:	055b      	lsls	r3, r3, #21
 80006d8:	4013      	ands	r3, r2
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2100      	movs	r1, #0
 80006e2:	2003      	movs	r0, #3
 80006e4:	f001 f8b6 	bl	8001854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80006e8:	2003      	movs	r0, #3
 80006ea:	f001 f8c8 	bl	800187e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b002      	add	sp, #8
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	40021000 	.word	0x40021000

080006fc <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b08b      	sub	sp, #44	@ 0x2c
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	2414      	movs	r4, #20
 8000706:	193b      	adds	r3, r7, r4
 8000708:	0018      	movs	r0, r3
 800070a:	2314      	movs	r3, #20
 800070c:	001a      	movs	r2, r3
 800070e:	2100      	movs	r1, #0
 8000710:	f002 fb14 	bl	8002d3c <memset>
  if(hcan->Instance==CAN)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a2b      	ldr	r2, [pc, #172]	@ (80007c8 <HAL_CAN_MspInit+0xcc>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d150      	bne.n	80007c0 <HAL_CAN_MspInit+0xc4>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800071e:	4b2b      	ldr	r3, [pc, #172]	@ (80007cc <HAL_CAN_MspInit+0xd0>)
 8000720:	69da      	ldr	r2, [r3, #28]
 8000722:	4b2a      	ldr	r3, [pc, #168]	@ (80007cc <HAL_CAN_MspInit+0xd0>)
 8000724:	2180      	movs	r1, #128	@ 0x80
 8000726:	0489      	lsls	r1, r1, #18
 8000728:	430a      	orrs	r2, r1
 800072a:	61da      	str	r2, [r3, #28]
 800072c:	4b27      	ldr	r3, [pc, #156]	@ (80007cc <HAL_CAN_MspInit+0xd0>)
 800072e:	69da      	ldr	r2, [r3, #28]
 8000730:	2380      	movs	r3, #128	@ 0x80
 8000732:	049b      	lsls	r3, r3, #18
 8000734:	4013      	ands	r3, r2
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b24      	ldr	r3, [pc, #144]	@ (80007cc <HAL_CAN_MspInit+0xd0>)
 800073c:	695a      	ldr	r2, [r3, #20]
 800073e:	4b23      	ldr	r3, [pc, #140]	@ (80007cc <HAL_CAN_MspInit+0xd0>)
 8000740:	2180      	movs	r1, #128	@ 0x80
 8000742:	02c9      	lsls	r1, r1, #11
 8000744:	430a      	orrs	r2, r1
 8000746:	615a      	str	r2, [r3, #20]
 8000748:	4b20      	ldr	r3, [pc, #128]	@ (80007cc <HAL_CAN_MspInit+0xd0>)
 800074a:	695a      	ldr	r2, [r3, #20]
 800074c:	2380      	movs	r3, #128	@ 0x80
 800074e:	02db      	lsls	r3, r3, #11
 8000750:	4013      	ands	r3, r2
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2280      	movs	r2, #128	@ 0x80
 800075a:	0052      	lsls	r2, r2, #1
 800075c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2202      	movs	r2, #2
 8000762:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000764:	193b      	adds	r3, r7, r4
 8000766:	2201      	movs	r2, #1
 8000768:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076a:	193b      	adds	r3, r7, r4
 800076c:	2203      	movs	r2, #3
 800076e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000770:	193b      	adds	r3, r7, r4
 8000772:	2204      	movs	r2, #4
 8000774:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000776:	193b      	adds	r3, r7, r4
 8000778:	4a15      	ldr	r2, [pc, #84]	@ (80007d0 <HAL_CAN_MspInit+0xd4>)
 800077a:	0019      	movs	r1, r3
 800077c:	0010      	movs	r0, r2
 800077e:	f001 f9fd 	bl	8001b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000782:	0021      	movs	r1, r4
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2280      	movs	r2, #128	@ 0x80
 8000788:	0092      	lsls	r2, r2, #2
 800078a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2202      	movs	r2, #2
 8000790:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2203      	movs	r2, #3
 800079c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2204      	movs	r2, #4
 80007a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	4a0a      	ldr	r2, [pc, #40]	@ (80007d0 <HAL_CAN_MspInit+0xd4>)
 80007a8:	0019      	movs	r1, r3
 80007aa:	0010      	movs	r0, r2
 80007ac:	f001 f9e6 	bl	8001b7c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2100      	movs	r1, #0
 80007b4:	201e      	movs	r0, #30
 80007b6:	f001 f84d 	bl	8001854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80007ba:	201e      	movs	r0, #30
 80007bc:	f001 f85f 	bl	800187e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 80007c0:	46c0      	nop			@ (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b00b      	add	sp, #44	@ 0x2c
 80007c6:	bd90      	pop	{r4, r7, pc}
 80007c8:	40006400 	.word	0x40006400
 80007cc:	40021000 	.word	0x40021000
 80007d0:	48000400 	.word	0x48000400

080007d4 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a0a      	ldr	r2, [pc, #40]	@ (800080c <HAL_PCD_MspInit+0x38>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d10d      	bne.n	8000802 <HAL_PCD_MspInit+0x2e>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80007e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <HAL_PCD_MspInit+0x3c>)
 80007e8:	69da      	ldr	r2, [r3, #28]
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <HAL_PCD_MspInit+0x3c>)
 80007ec:	2180      	movs	r1, #128	@ 0x80
 80007ee:	0409      	lsls	r1, r1, #16
 80007f0:	430a      	orrs	r2, r1
 80007f2:	61da      	str	r2, [r3, #28]
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <HAL_PCD_MspInit+0x3c>)
 80007f6:	69da      	ldr	r2, [r3, #28]
 80007f8:	2380      	movs	r3, #128	@ 0x80
 80007fa:	041b      	lsls	r3, r3, #16
 80007fc:	4013      	ands	r3, r2
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b004      	add	sp, #16
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	40005c00 	.word	0x40005c00
 8000810:	40021000 	.word	0x40021000

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000818:	46c0      	nop			@ (mov r8, r8)
 800081a:	e7fd      	b.n	8000818 <NMI_Handler+0x4>

0800081c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000820:	46c0      	nop			@ (mov r8, r8)
 8000822:	e7fd      	b.n	8000820 <HardFault_Handler+0x4>

08000824 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000828:	46c0      	nop			@ (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083c:	f000 f898 	bl	8000970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000840:	46c0      	nop			@ (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800084a:	f001 f835 	bl	80018b8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000858:	2380      	movs	r3, #128	@ 0x80
 800085a:	019b      	lsls	r3, r3, #6
 800085c:	0018      	movs	r0, r3
 800085e:	f001 fb23 	bl	8001ea8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800086c:	4b03      	ldr	r3, [pc, #12]	@ (800087c <CEC_CAN_IRQHandler+0x14>)
 800086e:	0018      	movs	r0, r3
 8000870:	f000 fd2f 	bl	80012d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000874:	46c0      	nop			@ (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	2000002c 	.word	0x2000002c

08000880 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000884:	46c0      	nop			@ (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800088c:	480d      	ldr	r0, [pc, #52]	@ (80008c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800088e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000890:	f7ff fff6 	bl	8000880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000894:	480c      	ldr	r0, [pc, #48]	@ (80008c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000896:	490d      	ldr	r1, [pc, #52]	@ (80008cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000898:	4a0d      	ldr	r2, [pc, #52]	@ (80008d0 <LoopForever+0xe>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800089c:	e002      	b.n	80008a4 <LoopCopyDataInit>

0800089e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a2:	3304      	adds	r3, #4

080008a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a8:	d3f9      	bcc.n	800089e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008aa:	4a0a      	ldr	r2, [pc, #40]	@ (80008d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008ac:	4c0a      	ldr	r4, [pc, #40]	@ (80008d8 <LoopForever+0x16>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b0:	e001      	b.n	80008b6 <LoopFillZerobss>

080008b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b4:	3204      	adds	r2, #4

080008b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b8:	d3fb      	bcc.n	80008b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ba:	f002 fa47 	bl	8002d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008be:	f7ff fcaf 	bl	8000220 <main>

080008c2 <LoopForever>:

LoopForever:
    b LoopForever
 80008c2:	e7fe      	b.n	80008c2 <LoopForever>
  ldr   r0, =_estack
 80008c4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008d0:	08002de4 	.word	0x08002de4
  ldr r2, =_sbss
 80008d4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008d8:	200003a0 	.word	0x200003a0

080008dc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008dc:	e7fe      	b.n	80008dc <ADC1_COMP_IRQHandler>
	...

080008e0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e4:	4b07      	ldr	r3, [pc, #28]	@ (8000904 <HAL_Init+0x24>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <HAL_Init+0x24>)
 80008ea:	2110      	movs	r1, #16
 80008ec:	430a      	orrs	r2, r1
 80008ee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008f0:	2003      	movs	r0, #3
 80008f2:	f000 f809 	bl	8000908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f6:	f7ff fed5 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008fa:	2300      	movs	r3, #0
}
 80008fc:	0018      	movs	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	40022000 	.word	0x40022000

08000908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000910:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <HAL_InitTick+0x5c>)
 8000912:	681c      	ldr	r4, [r3, #0]
 8000914:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <HAL_InitTick+0x60>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	0019      	movs	r1, r3
 800091a:	23fa      	movs	r3, #250	@ 0xfa
 800091c:	0098      	lsls	r0, r3, #2
 800091e:	f7ff fbf3 	bl	8000108 <__udivsi3>
 8000922:	0003      	movs	r3, r0
 8000924:	0019      	movs	r1, r3
 8000926:	0020      	movs	r0, r4
 8000928:	f7ff fbee 	bl	8000108 <__udivsi3>
 800092c:	0003      	movs	r3, r0
 800092e:	0018      	movs	r0, r3
 8000930:	f000 ffb5 	bl	800189e <HAL_SYSTICK_Config>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d001      	beq.n	800093c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000938:	2301      	movs	r3, #1
 800093a:	e00f      	b.n	800095c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b03      	cmp	r3, #3
 8000940:	d80b      	bhi.n	800095a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	2301      	movs	r3, #1
 8000946:	425b      	negs	r3, r3
 8000948:	2200      	movs	r2, #0
 800094a:	0018      	movs	r0, r3
 800094c:	f000 ff82 	bl	8001854 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <HAL_InitTick+0x64>)
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	e000      	b.n	800095c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
}
 800095c:	0018      	movs	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	b003      	add	sp, #12
 8000962:	bd90      	pop	{r4, r7, pc}
 8000964:	20000000 	.word	0x20000000
 8000968:	20000008 	.word	0x20000008
 800096c:	20000004 	.word	0x20000004

08000970 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000974:	4b05      	ldr	r3, [pc, #20]	@ (800098c <HAL_IncTick+0x1c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	001a      	movs	r2, r3
 800097a:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <HAL_IncTick+0x20>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	18d2      	adds	r2, r2, r3
 8000980:	4b03      	ldr	r3, [pc, #12]	@ (8000990 <HAL_IncTick+0x20>)
 8000982:	601a      	str	r2, [r3, #0]
}
 8000984:	46c0      	nop			@ (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			@ (mov r8, r8)
 800098c:	20000008 	.word	0x20000008
 8000990:	20000378 	.word	0x20000378

08000994 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  return uwTick;
 8000998:	4b02      	ldr	r3, [pc, #8]	@ (80009a4 <HAL_GetTick+0x10>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	0018      	movs	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	20000378 	.word	0x20000378

080009a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d101      	bne.n	80009ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e0f0      	b.n	8000b9c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2220      	movs	r2, #32
 80009be:	5c9b      	ldrb	r3, [r3, r2]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d103      	bne.n	80009ce <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	0018      	movs	r0, r3
 80009ca:	f7ff fe97 	bl	80006fc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2101      	movs	r1, #1
 80009da:	430a      	orrs	r2, r1
 80009dc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009de:	f7ff ffd9 	bl	8000994 <HAL_GetTick>
 80009e2:	0003      	movs	r3, r0
 80009e4:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009e6:	e013      	b.n	8000a10 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009e8:	f7ff ffd4 	bl	8000994 <HAL_GetTick>
 80009ec:	0002      	movs	r2, r0
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	2b0a      	cmp	r3, #10
 80009f4:	d90c      	bls.n	8000a10 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009fa:	2280      	movs	r2, #128	@ 0x80
 80009fc:	0292      	lsls	r2, r2, #10
 80009fe:	431a      	orrs	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2220      	movs	r2, #32
 8000a08:	2105      	movs	r1, #5
 8000a0a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	e0c5      	b.n	8000b9c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	2201      	movs	r2, #1
 8000a18:	4013      	ands	r3, r2
 8000a1a:	d0e5      	beq.n	80009e8 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2102      	movs	r1, #2
 8000a28:	438a      	bics	r2, r1
 8000a2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a2c:	f7ff ffb2 	bl	8000994 <HAL_GetTick>
 8000a30:	0003      	movs	r3, r0
 8000a32:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a34:	e013      	b.n	8000a5e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a36:	f7ff ffad 	bl	8000994 <HAL_GetTick>
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	2b0a      	cmp	r3, #10
 8000a42:	d90c      	bls.n	8000a5e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a48:	2280      	movs	r2, #128	@ 0x80
 8000a4a:	0292      	lsls	r2, r2, #10
 8000a4c:	431a      	orrs	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2220      	movs	r2, #32
 8000a56:	2105      	movs	r1, #5
 8000a58:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e09e      	b.n	8000b9c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2202      	movs	r2, #2
 8000a66:	4013      	ands	r3, r2
 8000a68:	d1e5      	bne.n	8000a36 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	7e1b      	ldrb	r3, [r3, #24]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d108      	bne.n	8000a84 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2180      	movs	r1, #128	@ 0x80
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	e007      	b.n	8000a94 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2180      	movs	r1, #128	@ 0x80
 8000a90:	438a      	bics	r2, r1
 8000a92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	7e5b      	ldrb	r3, [r3, #25]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d108      	bne.n	8000aae <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2140      	movs	r1, #64	@ 0x40
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	e007      	b.n	8000abe <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2140      	movs	r1, #64	@ 0x40
 8000aba:	438a      	bics	r2, r1
 8000abc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	7e9b      	ldrb	r3, [r3, #26]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d108      	bne.n	8000ad8 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2120      	movs	r1, #32
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	e007      	b.n	8000ae8 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2120      	movs	r1, #32
 8000ae4:	438a      	bics	r2, r1
 8000ae6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	7edb      	ldrb	r3, [r3, #27]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d108      	bne.n	8000b02 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2110      	movs	r1, #16
 8000afc:	438a      	bics	r2, r1
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	e007      	b.n	8000b12 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2110      	movs	r1, #16
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	7f1b      	ldrb	r3, [r3, #28]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d108      	bne.n	8000b2c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2108      	movs	r1, #8
 8000b26:	430a      	orrs	r2, r1
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	e007      	b.n	8000b3c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2108      	movs	r1, #8
 8000b38:	438a      	bics	r2, r1
 8000b3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	7f5b      	ldrb	r3, [r3, #29]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d108      	bne.n	8000b56 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2104      	movs	r1, #4
 8000b50:	430a      	orrs	r2, r1
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	e007      	b.n	8000b66 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2104      	movs	r1, #4
 8000b62:	438a      	bics	r2, r1
 8000b64:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	689a      	ldr	r2, [r3, #8]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	431a      	orrs	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	691b      	ldr	r3, [r3, #16]
 8000b74:	431a      	orrs	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	1e5a      	subs	r2, r3, #1
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2220      	movs	r2, #32
 8000b96:	2101      	movs	r1, #1
 8000b98:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000b9a:	2300      	movs	r3, #0
}
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b004      	add	sp, #16
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bb4:	2013      	movs	r0, #19
 8000bb6:	183b      	adds	r3, r7, r0
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	2120      	movs	r1, #32
 8000bbc:	5c52      	ldrb	r2, [r2, r1]
 8000bbe:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000bc0:	0002      	movs	r2, r0
 8000bc2:	18bb      	adds	r3, r7, r2
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d004      	beq.n	8000bd4 <HAL_CAN_ConfigFilter+0x30>
 8000bca:	18bb      	adds	r3, r7, r2
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d000      	beq.n	8000bd4 <HAL_CAN_ConfigFilter+0x30>
 8000bd2:	e0cd      	b.n	8000d70 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bd4:	697a      	ldr	r2, [r7, #20]
 8000bd6:	2380      	movs	r3, #128	@ 0x80
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	58d3      	ldr	r3, [r2, r3]
 8000bdc:	2201      	movs	r2, #1
 8000bde:	431a      	orrs	r2, r3
 8000be0:	0011      	movs	r1, r2
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	2380      	movs	r3, #128	@ 0x80
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	221f      	movs	r2, #31
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	409a      	lsls	r2, r3
 8000bf6:	0013      	movs	r3, r2
 8000bf8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	2387      	movs	r3, #135	@ 0x87
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	58d3      	ldr	r3, [r2, r3]
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	43d2      	mvns	r2, r2
 8000c06:	401a      	ands	r2, r3
 8000c08:	0011      	movs	r1, r2
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	2387      	movs	r3, #135	@ 0x87
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d129      	bne.n	8000c6e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	2383      	movs	r3, #131	@ 0x83
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	58d3      	ldr	r3, [r2, r3]
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	43d2      	mvns	r2, r2
 8000c26:	401a      	ands	r2, r3
 8000c28:	0011      	movs	r1, r2
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	2383      	movs	r3, #131	@ 0x83
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	041b      	lsls	r3, r3, #16
 8000c3e:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c44:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3248      	adds	r2, #72	@ 0x48
 8000c4a:	00d2      	lsls	r2, r2, #3
 8000c4c:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	041b      	lsls	r3, r3, #16
 8000c5a:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c60:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c62:	6979      	ldr	r1, [r7, #20]
 8000c64:	3348      	adds	r3, #72	@ 0x48
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	18cb      	adds	r3, r1, r3
 8000c6a:	3304      	adds	r3, #4
 8000c6c:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d128      	bne.n	8000cc8 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	2383      	movs	r3, #131	@ 0x83
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	58d2      	ldr	r2, [r2, r3]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	431a      	orrs	r2, r3
 8000c82:	0011      	movs	r1, r2
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	2383      	movs	r3, #131	@ 0x83
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	041b      	lsls	r3, r3, #16
 8000c98:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c9e:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	3248      	adds	r2, #72	@ 0x48
 8000ca4:	00d2      	lsls	r2, r2, #3
 8000ca6:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	041b      	lsls	r3, r3, #16
 8000cb4:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cbc:	6979      	ldr	r1, [r7, #20]
 8000cbe:	3348      	adds	r3, #72	@ 0x48
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	18cb      	adds	r3, r1, r3
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d10c      	bne.n	8000cea <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	2381      	movs	r3, #129	@ 0x81
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	58d3      	ldr	r3, [r2, r3]
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	43d2      	mvns	r2, r2
 8000cdc:	401a      	ands	r2, r3
 8000cde:	0011      	movs	r1, r2
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	2381      	movs	r3, #129	@ 0x81
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	50d1      	str	r1, [r2, r3]
 8000ce8:	e00a      	b.n	8000d00 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	2381      	movs	r3, #129	@ 0x81
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	58d2      	ldr	r2, [r2, r3]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0011      	movs	r1, r2
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	2381      	movs	r3, #129	@ 0x81
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	691b      	ldr	r3, [r3, #16]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d10c      	bne.n	8000d22 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d08:	697a      	ldr	r2, [r7, #20]
 8000d0a:	2385      	movs	r3, #133	@ 0x85
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	58d3      	ldr	r3, [r2, r3]
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	43d2      	mvns	r2, r2
 8000d14:	401a      	ands	r2, r3
 8000d16:	0011      	movs	r1, r2
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	2385      	movs	r3, #133	@ 0x85
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	50d1      	str	r1, [r2, r3]
 8000d20:	e00a      	b.n	8000d38 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	2385      	movs	r3, #133	@ 0x85
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	58d2      	ldr	r2, [r2, r3]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	0011      	movs	r1, r2
 8000d30:	697a      	ldr	r2, [r7, #20]
 8000d32:	2385      	movs	r3, #133	@ 0x85
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	6a1b      	ldr	r3, [r3, #32]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d10a      	bne.n	8000d56 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	2387      	movs	r3, #135	@ 0x87
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	58d2      	ldr	r2, [r2, r3]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	0011      	movs	r1, r2
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	2387      	movs	r3, #135	@ 0x87
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	2380      	movs	r3, #128	@ 0x80
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	58d3      	ldr	r3, [r2, r3]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4393      	bics	r3, r2
 8000d62:	0019      	movs	r1, r3
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	2380      	movs	r3, #128	@ 0x80
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	e007      	b.n	8000d80 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d74:	2280      	movs	r2, #128	@ 0x80
 8000d76:	02d2      	lsls	r2, r2, #11
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
  }
}
 8000d80:	0018      	movs	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b006      	add	sp, #24
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2220      	movs	r2, #32
 8000d94:	5c9b      	ldrb	r3, [r3, r2]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d12f      	bne.n	8000dfc <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2220      	movs	r2, #32
 8000da0:	2102      	movs	r1, #2
 8000da2:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2101      	movs	r1, #1
 8000db0:	438a      	bics	r2, r1
 8000db2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000db4:	f7ff fdee 	bl	8000994 <HAL_GetTick>
 8000db8:	0003      	movs	r3, r0
 8000dba:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000dbc:	e013      	b.n	8000de6 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dbe:	f7ff fde9 	bl	8000994 <HAL_GetTick>
 8000dc2:	0002      	movs	r2, r0
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	2b0a      	cmp	r3, #10
 8000dca:	d90c      	bls.n	8000de6 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd0:	2280      	movs	r2, #128	@ 0x80
 8000dd2:	0292      	lsls	r2, r2, #10
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2220      	movs	r2, #32
 8000dde:	2105      	movs	r1, #5
 8000de0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e012      	b.n	8000e0c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2201      	movs	r2, #1
 8000dee:	4013      	ands	r3, r2
 8000df0:	d1e5      	bne.n	8000dbe <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	e007      	b.n	8000e0c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e00:	2280      	movs	r2, #128	@ 0x80
 8000e02:	0312      	lsls	r2, r2, #12
 8000e04:	431a      	orrs	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
  }
}
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b004      	add	sp, #16
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
 8000e20:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e22:	201f      	movs	r0, #31
 8000e24:	183b      	adds	r3, r7, r0
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	2120      	movs	r1, #32
 8000e2a:	5c52      	ldrb	r2, [r2, r1]
 8000e2c:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e36:	183b      	adds	r3, r7, r0
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d004      	beq.n	8000e48 <HAL_CAN_AddTxMessage+0x34>
 8000e3e:	183b      	adds	r3, r7, r0
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d000      	beq.n	8000e48 <HAL_CAN_AddTxMessage+0x34>
 8000e46:	e0ab      	b.n	8000fa0 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	2380      	movs	r3, #128	@ 0x80
 8000e4c:	04db      	lsls	r3, r3, #19
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d10a      	bne.n	8000e68 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	2380      	movs	r3, #128	@ 0x80
 8000e56:	051b      	lsls	r3, r3, #20
 8000e58:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e5a:	d105      	bne.n	8000e68 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	2380      	movs	r3, #128	@ 0x80
 8000e60:	055b      	lsls	r3, r3, #21
 8000e62:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e64:	d100      	bne.n	8000e68 <HAL_CAN_AddTxMessage+0x54>
 8000e66:	e092      	b.n	8000f8e <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	0e1b      	lsrs	r3, r3, #24
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	4013      	ands	r3, r2
 8000e70:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e72:	2201      	movs	r2, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d10c      	bne.n	8000e9e <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4311      	orrs	r1, r2
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	3218      	adds	r2, #24
 8000e98:	0112      	lsls	r2, r2, #4
 8000e9a:	50d1      	str	r1, [r2, r3]
 8000e9c:	e00f      	b.n	8000ebe <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8000eb4:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	3218      	adds	r2, #24
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6819      	ldr	r1, [r3, #0]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	691a      	ldr	r2, [r3, #16]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3318      	adds	r3, #24
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	18cb      	adds	r3, r1, r3
 8000ece:	3304      	adds	r3, #4
 8000ed0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	7d1b      	ldrb	r3, [r3, #20]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d112      	bne.n	8000f00 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	3318      	adds	r3, #24
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	18d3      	adds	r3, r2, r3
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6819      	ldr	r1, [r3, #0]
 8000eee:	2380      	movs	r3, #128	@ 0x80
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	3318      	adds	r3, #24
 8000ef8:	011b      	lsls	r3, r3, #4
 8000efa:	18cb      	adds	r3, r1, r3
 8000efc:	3304      	adds	r3, #4
 8000efe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3307      	adds	r3, #7
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	061a      	lsls	r2, r3, #24
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3306      	adds	r3, #6
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	041b      	lsls	r3, r3, #16
 8000f10:	431a      	orrs	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3305      	adds	r3, #5
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	021b      	lsls	r3, r3, #8
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3304      	adds	r3, #4
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	0019      	movs	r1, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6818      	ldr	r0, [r3, #0]
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	6979      	ldr	r1, [r7, #20]
 8000f2c:	23c6      	movs	r3, #198	@ 0xc6
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	0109      	lsls	r1, r1, #4
 8000f32:	1841      	adds	r1, r0, r1
 8000f34:	18cb      	adds	r3, r1, r3
 8000f36:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3303      	adds	r3, #3
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	061a      	lsls	r2, r3, #24
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3302      	adds	r3, #2
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	041b      	lsls	r3, r3, #16
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	0019      	movs	r1, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6818      	ldr	r0, [r3, #0]
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	6979      	ldr	r1, [r7, #20]
 8000f62:	23c4      	movs	r3, #196	@ 0xc4
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	0109      	lsls	r1, r1, #4
 8000f68:	1841      	adds	r1, r0, r1
 8000f6a:	18cb      	adds	r3, r1, r3
 8000f6c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	3218      	adds	r2, #24
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	58d2      	ldr	r2, [r2, r3]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4311      	orrs	r1, r2
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	3218      	adds	r2, #24
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e010      	b.n	8000fb0 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f92:	2280      	movs	r2, #128	@ 0x80
 8000f94:	0392      	lsls	r2, r2, #14
 8000f96:	431a      	orrs	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e007      	b.n	8000fb0 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa4:	2280      	movs	r2, #128	@ 0x80
 8000fa6:	02d2      	lsls	r2, r2, #11
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
  }
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b008      	add	sp, #32
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fc4:	200b      	movs	r0, #11
 8000fc6:	183b      	adds	r3, r7, r0
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	2120      	movs	r1, #32
 8000fcc:	5c52      	ldrb	r2, [r2, r1]
 8000fce:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000fd0:	0002      	movs	r2, r0
 8000fd2:	18bb      	adds	r3, r7, r2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d003      	beq.n	8000fe2 <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 8000fda:	18bb      	adds	r3, r7, r2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d11d      	bne.n	800101e <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	2380      	movs	r3, #128	@ 0x80
 8000fea:	04db      	lsls	r3, r3, #19
 8000fec:	4013      	ands	r3, r2
 8000fee:	d002      	beq.n	8000ff6 <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	2380      	movs	r3, #128	@ 0x80
 8000ffe:	051b      	lsls	r3, r3, #20
 8001000:	4013      	ands	r3, r2
 8001002:	d002      	beq.n	800100a <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3301      	adds	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	2380      	movs	r3, #128	@ 0x80
 8001012:	055b      	lsls	r3, r3, #21
 8001014:	4013      	ands	r3, r2
 8001016:	d002      	beq.n	800101e <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3301      	adds	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	b004      	add	sp, #16
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001036:	2017      	movs	r0, #23
 8001038:	183b      	adds	r3, r7, r0
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	2120      	movs	r1, #32
 800103e:	5c52      	ldrb	r2, [r2, r1]
 8001040:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001042:	0002      	movs	r2, r0
 8001044:	18bb      	adds	r3, r7, r2
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d004      	beq.n	8001056 <HAL_CAN_GetRxMessage+0x2e>
 800104c:	18bb      	adds	r3, r7, r2
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d000      	beq.n	8001056 <HAL_CAN_GetRxMessage+0x2e>
 8001054:	e107      	b.n	8001266 <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d10e      	bne.n	800107a <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	2203      	movs	r2, #3
 8001064:	4013      	ands	r3, r2
 8001066:	d117      	bne.n	8001098 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106c:	2280      	movs	r2, #128	@ 0x80
 800106e:	0392      	lsls	r2, r2, #14
 8001070:	431a      	orrs	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e0fd      	b.n	8001276 <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	2203      	movs	r2, #3
 8001082:	4013      	ands	r3, r2
 8001084:	d108      	bne.n	8001098 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108a:	2280      	movs	r2, #128	@ 0x80
 800108c:	0392      	lsls	r2, r2, #14
 800108e:	431a      	orrs	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e0ee      	b.n	8001276 <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	321b      	adds	r2, #27
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	58d3      	ldr	r3, [r2, r3]
 80010a4:	2204      	movs	r2, #4
 80010a6:	401a      	ands	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d10b      	bne.n	80010cc <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	321b      	adds	r2, #27
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	58d3      	ldr	r3, [r2, r3]
 80010c0:	0d5b      	lsrs	r3, r3, #21
 80010c2:	055b      	lsls	r3, r3, #21
 80010c4:	0d5a      	lsrs	r2, r3, #21
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	e00a      	b.n	80010e2 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68ba      	ldr	r2, [r7, #8]
 80010d2:	321b      	adds	r2, #27
 80010d4:	0112      	lsls	r2, r2, #4
 80010d6:	58d3      	ldr	r3, [r2, r3]
 80010d8:	08db      	lsrs	r3, r3, #3
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	321b      	adds	r2, #27
 80010ea:	0112      	lsls	r2, r2, #4
 80010ec:	58d3      	ldr	r3, [r2, r3]
 80010ee:	2202      	movs	r2, #2
 80010f0:	401a      	ands	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	331b      	adds	r3, #27
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	18d3      	adds	r3, r2, r3
 8001102:	3304      	adds	r3, #4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2208      	movs	r2, #8
 8001108:	4013      	ands	r3, r2
 800110a:	d003      	beq.n	8001114 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2208      	movs	r2, #8
 8001110:	611a      	str	r2, [r3, #16]
 8001112:	e00b      	b.n	800112c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	331b      	adds	r3, #27
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	18d3      	adds	r3, r2, r3
 8001120:	3304      	adds	r3, #4
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	220f      	movs	r2, #15
 8001126:	401a      	ands	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	331b      	adds	r3, #27
 8001134:	011b      	lsls	r3, r3, #4
 8001136:	18d3      	adds	r3, r2, r3
 8001138:	3304      	adds	r3, #4
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	22ff      	movs	r2, #255	@ 0xff
 8001140:	401a      	ands	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	331b      	adds	r3, #27
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	18d3      	adds	r3, r2, r3
 8001152:	3304      	adds	r3, #4
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	0c1b      	lsrs	r3, r3, #16
 8001158:	041b      	lsls	r3, r3, #16
 800115a:	0c1a      	lsrs	r2, r3, #16
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6819      	ldr	r1, [r3, #0]
 8001164:	68ba      	ldr	r2, [r7, #8]
 8001166:	23dc      	movs	r3, #220	@ 0xdc
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	0112      	lsls	r2, r2, #4
 800116c:	188a      	adds	r2, r1, r2
 800116e:	18d3      	adds	r3, r2, r3
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	6819      	ldr	r1, [r3, #0]
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	23dc      	movs	r3, #220	@ 0xdc
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	188a      	adds	r2, r1, r2
 8001186:	18d3      	adds	r3, r2, r3
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	0a1a      	lsrs	r2, r3, #8
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	3301      	adds	r3, #1
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6819      	ldr	r1, [r3, #0]
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	23dc      	movs	r3, #220	@ 0xdc
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	188a      	adds	r2, r1, r2
 80011a2:	18d3      	adds	r3, r2, r3
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	0c1a      	lsrs	r2, r3, #16
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	3302      	adds	r3, #2
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6819      	ldr	r1, [r3, #0]
 80011b4:	68ba      	ldr	r2, [r7, #8]
 80011b6:	23dc      	movs	r3, #220	@ 0xdc
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	0112      	lsls	r2, r2, #4
 80011bc:	188a      	adds	r2, r1, r2
 80011be:	18d3      	adds	r3, r2, r3
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	0e1a      	lsrs	r2, r3, #24
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	3303      	adds	r3, #3
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6819      	ldr	r1, [r3, #0]
 80011d0:	68ba      	ldr	r2, [r7, #8]
 80011d2:	23de      	movs	r3, #222	@ 0xde
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	188a      	adds	r2, r1, r2
 80011da:	18d3      	adds	r3, r2, r3
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	3304      	adds	r3, #4
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6819      	ldr	r1, [r3, #0]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	23de      	movs	r3, #222	@ 0xde
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	188a      	adds	r2, r1, r2
 80011f4:	18d3      	adds	r3, r2, r3
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	0a1a      	lsrs	r2, r3, #8
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	3305      	adds	r3, #5
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6819      	ldr	r1, [r3, #0]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	23de      	movs	r3, #222	@ 0xde
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	188a      	adds	r2, r1, r2
 8001210:	18d3      	adds	r3, r2, r3
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	0c1a      	lsrs	r2, r3, #16
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	3306      	adds	r3, #6
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6819      	ldr	r1, [r3, #0]
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	23de      	movs	r3, #222	@ 0xde
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	0112      	lsls	r2, r2, #4
 800122a:	188a      	adds	r2, r1, r2
 800122c:	18d3      	adds	r3, r2, r3
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	0e1a      	lsrs	r2, r3, #24
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	3307      	adds	r3, #7
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d108      	bne.n	8001252 <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2120      	movs	r1, #32
 800124c:	430a      	orrs	r2, r1
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	e007      	b.n	8001262 <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	691a      	ldr	r2, [r3, #16]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2120      	movs	r1, #32
 800125e:	430a      	orrs	r2, r1
 8001260:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	e007      	b.n	8001276 <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126a:	2280      	movs	r2, #128	@ 0x80
 800126c:	02d2      	lsls	r2, r2, #11
 800126e:	431a      	orrs	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
  }
}
 8001276:	0018      	movs	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	b006      	add	sp, #24
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001288:	200f      	movs	r0, #15
 800128a:	183b      	adds	r3, r7, r0
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	2120      	movs	r1, #32
 8001290:	5c52      	ldrb	r2, [r2, r1]
 8001292:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001294:	0002      	movs	r2, r0
 8001296:	18bb      	adds	r3, r7, r2
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d003      	beq.n	80012a6 <HAL_CAN_ActivateNotification+0x28>
 800129e:	18bb      	adds	r3, r7, r2
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d109      	bne.n	80012ba <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6959      	ldr	r1, [r3, #20]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e007      	b.n	80012ca <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012be:	2280      	movs	r2, #128	@ 0x80
 80012c0:	02d2      	lsls	r2, r2, #11
 80012c2:	431a      	orrs	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
  }
}
 80012ca:	0018      	movs	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b004      	add	sp, #16
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b08a      	sub	sp, #40	@ 0x28
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	2201      	movs	r2, #1
 8001312:	4013      	ands	r3, r2
 8001314:	d100      	bne.n	8001318 <HAL_CAN_IRQHandler+0x46>
 8001316:	e084      	b.n	8001422 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	2201      	movs	r2, #1
 800131c:	4013      	ands	r3, r2
 800131e:	d024      	beq.n	800136a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2201      	movs	r2, #1
 8001326:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2202      	movs	r2, #2
 800132c:	4013      	ands	r3, r2
 800132e:	d004      	beq.n	800133a <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	0018      	movs	r0, r3
 8001334:	f000 f981 	bl	800163a <HAL_CAN_TxMailbox0CompleteCallback>
 8001338:	e017      	b.n	800136a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	2204      	movs	r2, #4
 800133e:	4013      	ands	r3, r2
 8001340:	d005      	beq.n	800134e <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001344:	2280      	movs	r2, #128	@ 0x80
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	4313      	orrs	r3, r2
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24
 800134c:	e00d      	b.n	800136a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	2208      	movs	r2, #8
 8001352:	4013      	ands	r3, r2
 8001354:	d005      	beq.n	8001362 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001358:	2280      	movs	r2, #128	@ 0x80
 800135a:	0152      	lsls	r2, r2, #5
 800135c:	4313      	orrs	r3, r2
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001360:	e003      	b.n	800136a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	0018      	movs	r0, r3
 8001366:	f000 f980 	bl	800166a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	2380      	movs	r3, #128	@ 0x80
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4013      	ands	r3, r2
 8001372:	d028      	beq.n	80013c6 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2280      	movs	r2, #128	@ 0x80
 800137a:	0052      	lsls	r2, r2, #1
 800137c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	2380      	movs	r3, #128	@ 0x80
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4013      	ands	r3, r2
 8001386:	d004      	beq.n	8001392 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	0018      	movs	r0, r3
 800138c:	f000 f95d 	bl	800164a <HAL_CAN_TxMailbox1CompleteCallback>
 8001390:	e019      	b.n	80013c6 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	2380      	movs	r3, #128	@ 0x80
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4013      	ands	r3, r2
 800139a:	d005      	beq.n	80013a8 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800139c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139e:	2280      	movs	r2, #128	@ 0x80
 80013a0:	0192      	lsls	r2, r2, #6
 80013a2:	4313      	orrs	r3, r2
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80013a6:	e00e      	b.n	80013c6 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	2380      	movs	r3, #128	@ 0x80
 80013ac:	011b      	lsls	r3, r3, #4
 80013ae:	4013      	ands	r3, r2
 80013b0:	d005      	beq.n	80013be <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80013b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b4:	2280      	movs	r2, #128	@ 0x80
 80013b6:	01d2      	lsls	r2, r2, #7
 80013b8:	4313      	orrs	r3, r2
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80013bc:	e003      	b.n	80013c6 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	0018      	movs	r0, r3
 80013c2:	f000 f95a 	bl	800167a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	2380      	movs	r3, #128	@ 0x80
 80013ca:	025b      	lsls	r3, r3, #9
 80013cc:	4013      	ands	r3, r2
 80013ce:	d028      	beq.n	8001422 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2280      	movs	r2, #128	@ 0x80
 80013d6:	0252      	lsls	r2, r2, #9
 80013d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	2380      	movs	r3, #128	@ 0x80
 80013de:	029b      	lsls	r3, r3, #10
 80013e0:	4013      	ands	r3, r2
 80013e2:	d004      	beq.n	80013ee <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	0018      	movs	r0, r3
 80013e8:	f000 f937 	bl	800165a <HAL_CAN_TxMailbox2CompleteCallback>
 80013ec:	e019      	b.n	8001422 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	2380      	movs	r3, #128	@ 0x80
 80013f2:	02db      	lsls	r3, r3, #11
 80013f4:	4013      	ands	r3, r2
 80013f6:	d005      	beq.n	8001404 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80013f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fa:	2280      	movs	r2, #128	@ 0x80
 80013fc:	0212      	lsls	r2, r2, #8
 80013fe:	4313      	orrs	r3, r2
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
 8001402:	e00e      	b.n	8001422 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	2380      	movs	r3, #128	@ 0x80
 8001408:	031b      	lsls	r3, r3, #12
 800140a:	4013      	ands	r3, r2
 800140c:	d005      	beq.n	800141a <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800140e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001410:	2280      	movs	r2, #128	@ 0x80
 8001412:	0252      	lsls	r2, r2, #9
 8001414:	4313      	orrs	r3, r2
 8001416:	627b      	str	r3, [r7, #36]	@ 0x24
 8001418:	e003      	b.n	8001422 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	0018      	movs	r0, r3
 800141e:	f000 f934 	bl	800168a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	2208      	movs	r2, #8
 8001426:	4013      	ands	r3, r2
 8001428:	d00c      	beq.n	8001444 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	2210      	movs	r2, #16
 800142e:	4013      	ands	r3, r2
 8001430:	d008      	beq.n	8001444 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	0092      	lsls	r2, r2, #2
 8001438:	4313      	orrs	r3, r2
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2210      	movs	r2, #16
 8001442:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	2204      	movs	r2, #4
 8001448:	4013      	ands	r3, r2
 800144a:	d00b      	beq.n	8001464 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	2208      	movs	r2, #8
 8001450:	4013      	ands	r3, r2
 8001452:	d007      	beq.n	8001464 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2208      	movs	r2, #8
 800145a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	0018      	movs	r0, r3
 8001460:	f000 f91b 	bl	800169a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001464:	6a3b      	ldr	r3, [r7, #32]
 8001466:	2202      	movs	r2, #2
 8001468:	4013      	ands	r3, r2
 800146a:	d009      	beq.n	8001480 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	2203      	movs	r2, #3
 8001474:	4013      	ands	r3, r2
 8001476:	d003      	beq.n	8001480 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	0018      	movs	r0, r3
 800147c:	f7ff f8f6 	bl	800066c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	2240      	movs	r2, #64	@ 0x40
 8001484:	4013      	ands	r3, r2
 8001486:	d00c      	beq.n	80014a2 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	2210      	movs	r2, #16
 800148c:	4013      	ands	r3, r2
 800148e:	d008      	beq.n	80014a2 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001492:	2280      	movs	r2, #128	@ 0x80
 8001494:	00d2      	lsls	r2, r2, #3
 8001496:	4313      	orrs	r3, r2
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2210      	movs	r2, #16
 80014a0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	2220      	movs	r2, #32
 80014a6:	4013      	ands	r3, r2
 80014a8:	d00b      	beq.n	80014c2 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	2208      	movs	r2, #8
 80014ae:	4013      	ands	r3, r2
 80014b0:	d007      	beq.n	80014c2 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2208      	movs	r2, #8
 80014b8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	0018      	movs	r0, r3
 80014be:	f000 f8fc 	bl	80016ba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	2210      	movs	r2, #16
 80014c6:	4013      	ands	r3, r2
 80014c8:	d009      	beq.n	80014de <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	2203      	movs	r2, #3
 80014d2:	4013      	ands	r3, r2
 80014d4:	d003      	beq.n	80014de <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	0018      	movs	r0, r3
 80014da:	f000 f8e6 	bl	80016aa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80014de:	6a3a      	ldr	r2, [r7, #32]
 80014e0:	2380      	movs	r3, #128	@ 0x80
 80014e2:	029b      	lsls	r3, r3, #10
 80014e4:	4013      	ands	r3, r2
 80014e6:	d00b      	beq.n	8001500 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	2210      	movs	r2, #16
 80014ec:	4013      	ands	r3, r2
 80014ee:	d007      	beq.n	8001500 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2210      	movs	r2, #16
 80014f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	0018      	movs	r0, r3
 80014fc:	f000 f8e5 	bl	80016ca <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001500:	6a3a      	ldr	r2, [r7, #32]
 8001502:	2380      	movs	r3, #128	@ 0x80
 8001504:	025b      	lsls	r3, r3, #9
 8001506:	4013      	ands	r3, r2
 8001508:	d00b      	beq.n	8001522 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	2208      	movs	r2, #8
 800150e:	4013      	ands	r3, r2
 8001510:	d007      	beq.n	8001522 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2208      	movs	r2, #8
 8001518:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	0018      	movs	r0, r3
 800151e:	f000 f8dc 	bl	80016da <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001522:	6a3a      	ldr	r2, [r7, #32]
 8001524:	2380      	movs	r3, #128	@ 0x80
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	4013      	ands	r3, r2
 800152a:	d100      	bne.n	800152e <HAL_CAN_IRQHandler+0x25c>
 800152c:	e074      	b.n	8001618 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	2204      	movs	r2, #4
 8001532:	4013      	ands	r3, r2
 8001534:	d100      	bne.n	8001538 <HAL_CAN_IRQHandler+0x266>
 8001536:	e06b      	b.n	8001610 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001538:	6a3a      	ldr	r2, [r7, #32]
 800153a:	2380      	movs	r3, #128	@ 0x80
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4013      	ands	r3, r2
 8001540:	d007      	beq.n	8001552 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2201      	movs	r2, #1
 8001546:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001548:	d003      	beq.n	8001552 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800154a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154c:	2201      	movs	r2, #1
 800154e:	4313      	orrs	r3, r2
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001552:	6a3a      	ldr	r2, [r7, #32]
 8001554:	2380      	movs	r3, #128	@ 0x80
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4013      	ands	r3, r2
 800155a:	d007      	beq.n	800156c <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2202      	movs	r2, #2
 8001560:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001562:	d003      	beq.n	800156c <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001566:	2202      	movs	r2, #2
 8001568:	4313      	orrs	r3, r2
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800156c:	6a3a      	ldr	r2, [r7, #32]
 800156e:	2380      	movs	r3, #128	@ 0x80
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	4013      	ands	r3, r2
 8001574:	d007      	beq.n	8001586 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2204      	movs	r2, #4
 800157a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800157c:	d003      	beq.n	8001586 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	2204      	movs	r2, #4
 8001582:	4313      	orrs	r3, r2
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001586:	6a3a      	ldr	r2, [r7, #32]
 8001588:	2380      	movs	r3, #128	@ 0x80
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	4013      	ands	r3, r2
 800158e:	d03f      	beq.n	8001610 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2270      	movs	r2, #112	@ 0x70
 8001594:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001596:	d03b      	beq.n	8001610 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2270      	movs	r2, #112	@ 0x70
 800159c:	4013      	ands	r3, r2
 800159e:	2b60      	cmp	r3, #96	@ 0x60
 80015a0:	d027      	beq.n	80015f2 <HAL_CAN_IRQHandler+0x320>
 80015a2:	d82c      	bhi.n	80015fe <HAL_CAN_IRQHandler+0x32c>
 80015a4:	2b50      	cmp	r3, #80	@ 0x50
 80015a6:	d01f      	beq.n	80015e8 <HAL_CAN_IRQHandler+0x316>
 80015a8:	d829      	bhi.n	80015fe <HAL_CAN_IRQHandler+0x32c>
 80015aa:	2b40      	cmp	r3, #64	@ 0x40
 80015ac:	d017      	beq.n	80015de <HAL_CAN_IRQHandler+0x30c>
 80015ae:	d826      	bhi.n	80015fe <HAL_CAN_IRQHandler+0x32c>
 80015b0:	2b30      	cmp	r3, #48	@ 0x30
 80015b2:	d00f      	beq.n	80015d4 <HAL_CAN_IRQHandler+0x302>
 80015b4:	d823      	bhi.n	80015fe <HAL_CAN_IRQHandler+0x32c>
 80015b6:	2b10      	cmp	r3, #16
 80015b8:	d002      	beq.n	80015c0 <HAL_CAN_IRQHandler+0x2ee>
 80015ba:	2b20      	cmp	r3, #32
 80015bc:	d005      	beq.n	80015ca <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80015be:	e01e      	b.n	80015fe <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 80015c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c2:	2208      	movs	r2, #8
 80015c4:	4313      	orrs	r3, r2
 80015c6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015c8:	e01a      	b.n	8001600 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 80015ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015cc:	2210      	movs	r2, #16
 80015ce:	4313      	orrs	r3, r2
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015d2:	e015      	b.n	8001600 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 80015d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d6:	2220      	movs	r2, #32
 80015d8:	4313      	orrs	r3, r2
 80015da:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015dc:	e010      	b.n	8001600 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	2240      	movs	r2, #64	@ 0x40
 80015e2:	4313      	orrs	r3, r2
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015e6:	e00b      	b.n	8001600 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 80015e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ea:	2280      	movs	r2, #128	@ 0x80
 80015ec:	4313      	orrs	r3, r2
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015f0:	e006      	b.n	8001600 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80015f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f4:	2280      	movs	r2, #128	@ 0x80
 80015f6:	0052      	lsls	r2, r2, #1
 80015f8:	4313      	orrs	r3, r2
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015fc:	e000      	b.n	8001600 <HAL_CAN_IRQHandler+0x32e>
            break;
 80015fe:	46c0      	nop			@ (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	699a      	ldr	r2, [r3, #24]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2170      	movs	r1, #112	@ 0x70
 800160c:	438a      	bics	r2, r1
 800160e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2204      	movs	r2, #4
 8001616:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	2b00      	cmp	r3, #0
 800161c:	d009      	beq.n	8001632 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	0018      	movs	r0, r3
 800162e:	f000 f85c 	bl	80016ea <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001632:	46c0      	nop			@ (mov r8, r8)
 8001634:	46bd      	mov	sp, r7
 8001636:	b00a      	add	sp, #40	@ 0x28
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	46bd      	mov	sp, r7
 8001646:	b002      	add	sp, #8
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001652:	46c0      	nop			@ (mov r8, r8)
 8001654:	46bd      	mov	sp, r7
 8001656:	b002      	add	sp, #8
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001662:	46c0      	nop			@ (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	b002      	add	sp, #8
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001672:	46c0      	nop			@ (mov r8, r8)
 8001674:	46bd      	mov	sp, r7
 8001676:	b002      	add	sp, #8
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001682:	46c0      	nop			@ (mov r8, r8)
 8001684:	46bd      	mov	sp, r7
 8001686:	b002      	add	sp, #8
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001692:	46c0      	nop			@ (mov r8, r8)
 8001694:	46bd      	mov	sp, r7
 8001696:	b002      	add	sp, #8
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80016a2:	46c0      	nop			@ (mov r8, r8)
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b002      	add	sp, #8
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b002      	add	sp, #8
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80016c2:	46c0      	nop			@ (mov r8, r8)
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b002      	add	sp, #8
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80016d2:	46c0      	nop			@ (mov r8, r8)
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b002      	add	sp, #8
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80016e2:	46c0      	nop			@ (mov r8, r8)
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b002      	add	sp, #8
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80016f2:	46c0      	nop			@ (mov r8, r8)
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b002      	add	sp, #8
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	0002      	movs	r2, r0
 8001704:	1dfb      	adds	r3, r7, #7
 8001706:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001708:	1dfb      	adds	r3, r7, #7
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b7f      	cmp	r3, #127	@ 0x7f
 800170e:	d809      	bhi.n	8001724 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001710:	1dfb      	adds	r3, r7, #7
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	001a      	movs	r2, r3
 8001716:	231f      	movs	r3, #31
 8001718:	401a      	ands	r2, r3
 800171a:	4b04      	ldr	r3, [pc, #16]	@ (800172c <__NVIC_EnableIRQ+0x30>)
 800171c:	2101      	movs	r1, #1
 800171e:	4091      	lsls	r1, r2
 8001720:	000a      	movs	r2, r1
 8001722:	601a      	str	r2, [r3, #0]
  }
}
 8001724:	46c0      	nop			@ (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	b002      	add	sp, #8
 800172a:	bd80      	pop	{r7, pc}
 800172c:	e000e100 	.word	0xe000e100

08001730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	0002      	movs	r2, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	1dfb      	adds	r3, r7, #7
 800173c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800173e:	1dfb      	adds	r3, r7, #7
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b7f      	cmp	r3, #127	@ 0x7f
 8001744:	d828      	bhi.n	8001798 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001746:	4a2f      	ldr	r2, [pc, #188]	@ (8001804 <__NVIC_SetPriority+0xd4>)
 8001748:	1dfb      	adds	r3, r7, #7
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b25b      	sxtb	r3, r3
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	33c0      	adds	r3, #192	@ 0xc0
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	589b      	ldr	r3, [r3, r2]
 8001756:	1dfa      	adds	r2, r7, #7
 8001758:	7812      	ldrb	r2, [r2, #0]
 800175a:	0011      	movs	r1, r2
 800175c:	2203      	movs	r2, #3
 800175e:	400a      	ands	r2, r1
 8001760:	00d2      	lsls	r2, r2, #3
 8001762:	21ff      	movs	r1, #255	@ 0xff
 8001764:	4091      	lsls	r1, r2
 8001766:	000a      	movs	r2, r1
 8001768:	43d2      	mvns	r2, r2
 800176a:	401a      	ands	r2, r3
 800176c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	019b      	lsls	r3, r3, #6
 8001772:	22ff      	movs	r2, #255	@ 0xff
 8001774:	401a      	ands	r2, r3
 8001776:	1dfb      	adds	r3, r7, #7
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	0018      	movs	r0, r3
 800177c:	2303      	movs	r3, #3
 800177e:	4003      	ands	r3, r0
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001784:	481f      	ldr	r0, [pc, #124]	@ (8001804 <__NVIC_SetPriority+0xd4>)
 8001786:	1dfb      	adds	r3, r7, #7
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b25b      	sxtb	r3, r3
 800178c:	089b      	lsrs	r3, r3, #2
 800178e:	430a      	orrs	r2, r1
 8001790:	33c0      	adds	r3, #192	@ 0xc0
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001796:	e031      	b.n	80017fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001798:	4a1b      	ldr	r2, [pc, #108]	@ (8001808 <__NVIC_SetPriority+0xd8>)
 800179a:	1dfb      	adds	r3, r7, #7
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	0019      	movs	r1, r3
 80017a0:	230f      	movs	r3, #15
 80017a2:	400b      	ands	r3, r1
 80017a4:	3b08      	subs	r3, #8
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	3306      	adds	r3, #6
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	18d3      	adds	r3, r2, r3
 80017ae:	3304      	adds	r3, #4
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	1dfa      	adds	r2, r7, #7
 80017b4:	7812      	ldrb	r2, [r2, #0]
 80017b6:	0011      	movs	r1, r2
 80017b8:	2203      	movs	r2, #3
 80017ba:	400a      	ands	r2, r1
 80017bc:	00d2      	lsls	r2, r2, #3
 80017be:	21ff      	movs	r1, #255	@ 0xff
 80017c0:	4091      	lsls	r1, r2
 80017c2:	000a      	movs	r2, r1
 80017c4:	43d2      	mvns	r2, r2
 80017c6:	401a      	ands	r2, r3
 80017c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	019b      	lsls	r3, r3, #6
 80017ce:	22ff      	movs	r2, #255	@ 0xff
 80017d0:	401a      	ands	r2, r3
 80017d2:	1dfb      	adds	r3, r7, #7
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	0018      	movs	r0, r3
 80017d8:	2303      	movs	r3, #3
 80017da:	4003      	ands	r3, r0
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017e0:	4809      	ldr	r0, [pc, #36]	@ (8001808 <__NVIC_SetPriority+0xd8>)
 80017e2:	1dfb      	adds	r3, r7, #7
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	001c      	movs	r4, r3
 80017e8:	230f      	movs	r3, #15
 80017ea:	4023      	ands	r3, r4
 80017ec:	3b08      	subs	r3, #8
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	430a      	orrs	r2, r1
 80017f2:	3306      	adds	r3, #6
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	18c3      	adds	r3, r0, r3
 80017f8:	3304      	adds	r3, #4
 80017fa:	601a      	str	r2, [r3, #0]
}
 80017fc:	46c0      	nop			@ (mov r8, r8)
 80017fe:	46bd      	mov	sp, r7
 8001800:	b003      	add	sp, #12
 8001802:	bd90      	pop	{r4, r7, pc}
 8001804:	e000e100 	.word	0xe000e100
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	1e5a      	subs	r2, r3, #1
 8001818:	2380      	movs	r3, #128	@ 0x80
 800181a:	045b      	lsls	r3, r3, #17
 800181c:	429a      	cmp	r2, r3
 800181e:	d301      	bcc.n	8001824 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001820:	2301      	movs	r3, #1
 8001822:	e010      	b.n	8001846 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001824:	4b0a      	ldr	r3, [pc, #40]	@ (8001850 <SysTick_Config+0x44>)
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	3a01      	subs	r2, #1
 800182a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182c:	2301      	movs	r3, #1
 800182e:	425b      	negs	r3, r3
 8001830:	2103      	movs	r1, #3
 8001832:	0018      	movs	r0, r3
 8001834:	f7ff ff7c 	bl	8001730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <SysTick_Config+0x44>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183e:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <SysTick_Config+0x44>)
 8001840:	2207      	movs	r2, #7
 8001842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001844:	2300      	movs	r3, #0
}
 8001846:	0018      	movs	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	b002      	add	sp, #8
 800184c:	bd80      	pop	{r7, pc}
 800184e:	46c0      	nop			@ (mov r8, r8)
 8001850:	e000e010 	.word	0xe000e010

08001854 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	210f      	movs	r1, #15
 8001860:	187b      	adds	r3, r7, r1
 8001862:	1c02      	adds	r2, r0, #0
 8001864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	187b      	adds	r3, r7, r1
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b25b      	sxtb	r3, r3
 800186e:	0011      	movs	r1, r2
 8001870:	0018      	movs	r0, r3
 8001872:	f7ff ff5d 	bl	8001730 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001876:	46c0      	nop			@ (mov r8, r8)
 8001878:	46bd      	mov	sp, r7
 800187a:	b004      	add	sp, #16
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	0002      	movs	r2, r0
 8001886:	1dfb      	adds	r3, r7, #7
 8001888:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800188a:	1dfb      	adds	r3, r7, #7
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b25b      	sxtb	r3, r3
 8001890:	0018      	movs	r0, r3
 8001892:	f7ff ff33 	bl	80016fc <__NVIC_EnableIRQ>
}
 8001896:	46c0      	nop			@ (mov r8, r8)
 8001898:	46bd      	mov	sp, r7
 800189a:	b002      	add	sp, #8
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	0018      	movs	r0, r3
 80018aa:	f7ff ffaf 	bl	800180c <SysTick_Config>
 80018ae:	0003      	movs	r3, r0
}
 80018b0:	0018      	movs	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b002      	add	sp, #8
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80018b8:	b5b0      	push	{r4, r5, r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80018c2:	4b6e      	ldr	r3, [pc, #440]	@ (8001a7c <HAL_FLASH_IRQHandler+0x1c4>)
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	2210      	movs	r2, #16
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b10      	cmp	r3, #16
 80018cc:	d005      	beq.n	80018da <HAL_FLASH_IRQHandler+0x22>
 80018ce:	4b6b      	ldr	r3, [pc, #428]	@ (8001a7c <HAL_FLASH_IRQHandler+0x1c4>)
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2204      	movs	r2, #4
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d10f      	bne.n	80018fa <HAL_FLASH_IRQHandler+0x42>
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 80018da:	4b69      	ldr	r3, [pc, #420]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 80018e0:	4b67      	ldr	r3, [pc, #412]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	4252      	negs	r2, r2
 80018e6:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 80018e8:	f000 f8fa 	bl	8001ae0 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	0018      	movs	r0, r3
 80018f0:	f000 f8d2 	bl	8001a98 <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80018f4:	4b62      	ldr	r3, [pc, #392]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80018fa:	4b60      	ldr	r3, [pc, #384]	@ (8001a7c <HAL_FLASH_IRQHandler+0x1c4>)
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2220      	movs	r2, #32
 8001900:	4013      	ands	r3, r2
 8001902:	2b20      	cmp	r3, #32
 8001904:	d000      	beq.n	8001908 <HAL_FLASH_IRQHandler+0x50>
 8001906:	e0a1      	b.n	8001a4c <HAL_FLASH_IRQHandler+0x194>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001908:	4b5c      	ldr	r3, [pc, #368]	@ (8001a7c <HAL_FLASH_IRQHandler+0x1c4>)
 800190a:	2220      	movs	r2, #32
 800190c:	60da      	str	r2, [r3, #12]
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 800190e:	4b5c      	ldr	r3, [pc, #368]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d100      	bne.n	800191a <HAL_FLASH_IRQHandler+0x62>
 8001918:	e098      	b.n	8001a4c <HAL_FLASH_IRQHandler+0x194>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 800191a:	4b59      	ldr	r3, [pc, #356]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b01      	cmp	r3, #1
 8001922:	d132      	bne.n	800198a <HAL_FLASH_IRQHandler+0xd2>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8001924:	4b56      	ldr	r3, [pc, #344]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	1e5a      	subs	r2, r3, #1
 800192a:	4b55      	ldr	r3, [pc, #340]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 800192c:	605a      	str	r2, [r3, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 800192e:	4b54      	ldr	r3, [pc, #336]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d01b      	beq.n	800196e <HAL_FLASH_IRQHandler+0xb6>
        {
          addresstmp = pFlash.Address;
 8001936:	4b52      	ldr	r3, [pc, #328]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	0018      	movs	r0, r3
 8001940:	f000 f8a2 	bl	8001a88 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8001944:	4b4e      	ldr	r3, [pc, #312]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2280      	movs	r2, #128	@ 0x80
 800194a:	0112      	lsls	r2, r2, #4
 800194c:	4694      	mov	ip, r2
 800194e:	4463      	add	r3, ip
 8001950:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 8001952:	4b4b      	ldr	r3, [pc, #300]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	609a      	str	r2, [r3, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001958:	4b48      	ldr	r3, [pc, #288]	@ (8001a7c <HAL_FLASH_IRQHandler+0x1c4>)
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	4b47      	ldr	r3, [pc, #284]	@ (8001a7c <HAL_FLASH_IRQHandler+0x1c4>)
 800195e:	2102      	movs	r1, #2
 8001960:	438a      	bics	r2, r1
 8001962:	611a      	str	r2, [r3, #16]

          FLASH_PageErase(addresstmp);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	0018      	movs	r0, r3
 8001968:	f000 f8ea 	bl	8001b40 <FLASH_PageErase>
 800196c:	e06e      	b.n	8001a4c <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 800196e:	2301      	movs	r3, #1
 8001970:	425b      	negs	r3, r3
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	4b42      	ldr	r3, [pc, #264]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800197a:	4b41      	ldr	r3, [pc, #260]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	0018      	movs	r0, r3
 8001984:	f000 f880 	bl	8001a88 <HAL_FLASH_EndOfOperationCallback>
 8001988:	e060      	b.n	8001a4c <HAL_FLASH_IRQHandler+0x194>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800198a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d10c      	bne.n	80019ae <HAL_FLASH_IRQHandler+0xf6>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001994:	4b39      	ldr	r3, [pc, #228]	@ (8001a7c <HAL_FLASH_IRQHandler+0x1c4>)
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	4b38      	ldr	r3, [pc, #224]	@ (8001a7c <HAL_FLASH_IRQHandler+0x1c4>)
 800199a:	2104      	movs	r1, #4
 800199c:	438a      	bics	r2, r1
 800199e:	611a      	str	r2, [r3, #16]

          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0);
 80019a0:	2000      	movs	r0, #0
 80019a2:	f000 f871 	bl	8001a88 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80019a6:	4b36      	ldr	r3, [pc, #216]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
 80019ac:	e04e      	b.n	8001a4c <HAL_FLASH_IRQHandler+0x194>
        }
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 80019ae:	4b34      	ldr	r3, [pc, #208]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	1e5a      	subs	r2, r3, #1
 80019b4:	4b32      	ldr	r3, [pc, #200]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 80019b6:	605a      	str	r2, [r3, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 80019b8:	4b31      	ldr	r3, [pc, #196]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d021      	beq.n	8001a04 <HAL_FLASH_IRQHandler+0x14c>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2;
 80019c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	1c9a      	adds	r2, r3, #2
 80019c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 80019c8:	609a      	str	r2, [r3, #8]
          addresstmp = pFlash.Address;
 80019ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 80019d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 80019d2:	691a      	ldr	r2, [r3, #16]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	0419      	lsls	r1, r3, #16
 80019d8:	0c14      	lsrs	r4, r2, #16
 80019da:	430c      	orrs	r4, r1
 80019dc:	0c1d      	lsrs	r5, r3, #16
 80019de:	4b28      	ldr	r3, [pc, #160]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 80019e0:	611c      	str	r4, [r3, #16]
 80019e2:	615d      	str	r5, [r3, #20]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80019e4:	4b25      	ldr	r3, [pc, #148]	@ (8001a7c <HAL_FLASH_IRQHandler+0x1c4>)
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	4b24      	ldr	r3, [pc, #144]	@ (8001a7c <HAL_FLASH_IRQHandler+0x1c4>)
 80019ea:	2101      	movs	r1, #1
 80019ec:	438a      	bics	r2, r1
 80019ee:	611a      	str	r2, [r3, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 80019f0:	4b23      	ldr	r3, [pc, #140]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 80019f2:	691a      	ldr	r2, [r3, #16]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	b292      	uxth	r2, r2
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	0011      	movs	r1, r2
 80019fc:	0018      	movs	r0, r3
 80019fe:	f000 f853 	bl	8001aa8 <FLASH_Program_HalfWord>
 8001a02:	e023      	b.n	8001a4c <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8001a04:	4b1e      	ldr	r3, [pc, #120]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d105      	bne.n	8001a1a <HAL_FLASH_IRQHandler+0x162>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	0018      	movs	r0, r3
 8001a14:	f000 f838 	bl	8001a88 <HAL_FLASH_EndOfOperationCallback>
 8001a18:	e011      	b.n	8001a3e <HAL_FLASH_IRQHandler+0x186>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8001a1a:	4b19      	ldr	r3, [pc, #100]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d106      	bne.n	8001a32 <HAL_FLASH_IRQHandler+0x17a>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8001a24:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	3b02      	subs	r3, #2
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f000 f82c 	bl	8001a88 <HAL_FLASH_EndOfOperationCallback>
 8001a30:	e005      	b.n	8001a3e <HAL_FLASH_IRQHandler+0x186>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8001a32:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	3b06      	subs	r3, #6
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f000 f825 	bl	8001a88 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8001a3e:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	4252      	negs	r2, r2
 8001a44:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10e      	bne.n	8001a74 <HAL_FLASH_IRQHandler+0x1bc>
  {
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8001a56:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_FLASH_IRQHandler+0x1c4>)
 8001a58:	691a      	ldr	r2, [r3, #16]
 8001a5a:	4b08      	ldr	r3, [pc, #32]	@ (8001a7c <HAL_FLASH_IRQHandler+0x1c4>)
 8001a5c:	2107      	movs	r1, #7
 8001a5e:	438a      	bics	r2, r1
 8001a60:	611a      	str	r2, [r3, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8001a62:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_FLASH_IRQHandler+0x1c4>)
 8001a64:	691a      	ldr	r2, [r3, #16]
 8001a66:	4b05      	ldr	r3, [pc, #20]	@ (8001a7c <HAL_FLASH_IRQHandler+0x1c4>)
 8001a68:	4906      	ldr	r1, [pc, #24]	@ (8001a84 <HAL_FLASH_IRQHandler+0x1cc>)
 8001a6a:	400a      	ands	r2, r1
 8001a6c:	611a      	str	r2, [r3, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8001a6e:	4b04      	ldr	r3, [pc, #16]	@ (8001a80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	761a      	strb	r2, [r3, #24]
  }
}
 8001a74:	46c0      	nop			@ (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b002      	add	sp, #8
 8001a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a7c:	40022000 	.word	0x40022000
 8001a80:	20000380 	.word	0x20000380
 8001a84:	ffffebff 	.word	0xffffebff

08001a88 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8001a90:	46c0      	nop			@ (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b002      	add	sp, #8
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8001aa0:	46c0      	nop			@ (mov r8, r8)
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b002      	add	sp, #8
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	000a      	movs	r2, r1
 8001ab2:	1cbb      	adds	r3, r7, #2
 8001ab4:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ab6:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <FLASH_Program_HalfWord+0x30>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001abc:	4b07      	ldr	r3, [pc, #28]	@ (8001adc <FLASH_Program_HalfWord+0x34>)
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <FLASH_Program_HalfWord+0x34>)
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	1cba      	adds	r2, r7, #2
 8001acc:	8812      	ldrh	r2, [r2, #0]
 8001ace:	801a      	strh	r2, [r3, #0]
}
 8001ad0:	46c0      	nop			@ (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b002      	add	sp, #8
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000380 	.word	0x20000380
 8001adc:	40022000 	.word	0x40022000

08001ae0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001aea:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <FLASH_SetErrorCode+0x58>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2210      	movs	r2, #16
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b10      	cmp	r3, #16
 8001af4:	d109      	bne.n	8001b0a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001af6:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <FLASH_SetErrorCode+0x5c>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	2202      	movs	r2, #2
 8001afc:	431a      	orrs	r2, r3
 8001afe:	4b0f      	ldr	r3, [pc, #60]	@ (8001b3c <FLASH_SetErrorCode+0x5c>)
 8001b00:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2210      	movs	r2, #16
 8001b06:	4313      	orrs	r3, r2
 8001b08:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b38 <FLASH_SetErrorCode+0x58>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	2204      	movs	r2, #4
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d109      	bne.n	8001b2a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001b16:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <FLASH_SetErrorCode+0x5c>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	4b07      	ldr	r3, [pc, #28]	@ (8001b3c <FLASH_SetErrorCode+0x5c>)
 8001b20:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2204      	movs	r2, #4
 8001b26:	4313      	orrs	r3, r2
 8001b28:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001b2a:	4b03      	ldr	r3, [pc, #12]	@ (8001b38 <FLASH_SetErrorCode+0x58>)
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	60da      	str	r2, [r3, #12]
}  
 8001b30:	46c0      	nop			@ (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b002      	add	sp, #8
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40022000 	.word	0x40022000
 8001b3c:	20000380 	.word	0x20000380

08001b40 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b48:	4b0a      	ldr	r3, [pc, #40]	@ (8001b74 <FLASH_PageErase+0x34>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b78 <FLASH_PageErase+0x38>)
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <FLASH_PageErase+0x38>)
 8001b54:	2102      	movs	r1, #2
 8001b56:	430a      	orrs	r2, r1
 8001b58:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001b5a:	4b07      	ldr	r3, [pc, #28]	@ (8001b78 <FLASH_PageErase+0x38>)
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001b60:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <FLASH_PageErase+0x38>)
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	4b04      	ldr	r3, [pc, #16]	@ (8001b78 <FLASH_PageErase+0x38>)
 8001b66:	2140      	movs	r1, #64	@ 0x40
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	611a      	str	r2, [r3, #16]
}
 8001b6c:	46c0      	nop			@ (mov r8, r8)
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b002      	add	sp, #8
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000380 	.word	0x20000380
 8001b78:	40022000 	.word	0x40022000

08001b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8a:	e155      	b.n	8001e38 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2101      	movs	r1, #1
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4091      	lsls	r1, r2
 8001b96:	000a      	movs	r2, r1
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d100      	bne.n	8001ba4 <HAL_GPIO_Init+0x28>
 8001ba2:	e146      	b.n	8001e32 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2203      	movs	r2, #3
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d005      	beq.n	8001bbc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d130      	bne.n	8001c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	0013      	movs	r3, r2
 8001bcc:	43da      	mvns	r2, r3
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	0013      	movs	r3, r2
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	2201      	movs	r2, #1
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	0013      	movs	r3, r2
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2203      	movs	r2, #3
 8001c24:	4013      	ands	r3, r2
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d017      	beq.n	8001c5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	2203      	movs	r2, #3
 8001c36:	409a      	lsls	r2, r3
 8001c38:	0013      	movs	r3, r2
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	0013      	movs	r3, r2
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2203      	movs	r2, #3
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d123      	bne.n	8001cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	08da      	lsrs	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3208      	adds	r2, #8
 8001c6e:	0092      	lsls	r2, r2, #2
 8001c70:	58d3      	ldr	r3, [r2, r3]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	2207      	movs	r2, #7
 8001c78:	4013      	ands	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	409a      	lsls	r2, r3
 8001c80:	0013      	movs	r3, r2
 8001c82:	43da      	mvns	r2, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2107      	movs	r1, #7
 8001c92:	400b      	ands	r3, r1
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	409a      	lsls	r2, r3
 8001c98:	0013      	movs	r3, r2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	08da      	lsrs	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3208      	adds	r2, #8
 8001ca8:	0092      	lsls	r2, r2, #2
 8001caa:	6939      	ldr	r1, [r7, #16]
 8001cac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	2203      	movs	r2, #3
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	0013      	movs	r3, r2
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2203      	movs	r2, #3
 8001ccc:	401a      	ands	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	0013      	movs	r3, r2
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	23c0      	movs	r3, #192	@ 0xc0
 8001ce8:	029b      	lsls	r3, r3, #10
 8001cea:	4013      	ands	r3, r2
 8001cec:	d100      	bne.n	8001cf0 <HAL_GPIO_Init+0x174>
 8001cee:	e0a0      	b.n	8001e32 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf0:	4b57      	ldr	r3, [pc, #348]	@ (8001e50 <HAL_GPIO_Init+0x2d4>)
 8001cf2:	699a      	ldr	r2, [r3, #24]
 8001cf4:	4b56      	ldr	r3, [pc, #344]	@ (8001e50 <HAL_GPIO_Init+0x2d4>)
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	619a      	str	r2, [r3, #24]
 8001cfc:	4b54      	ldr	r3, [pc, #336]	@ (8001e50 <HAL_GPIO_Init+0x2d4>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2201      	movs	r2, #1
 8001d02:	4013      	ands	r3, r2
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d08:	4a52      	ldr	r2, [pc, #328]	@ (8001e54 <HAL_GPIO_Init+0x2d8>)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	3302      	adds	r3, #2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	589b      	ldr	r3, [r3, r2]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2203      	movs	r2, #3
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	409a      	lsls	r2, r3
 8001d22:	0013      	movs	r3, r2
 8001d24:	43da      	mvns	r2, r3
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	2390      	movs	r3, #144	@ 0x90
 8001d30:	05db      	lsls	r3, r3, #23
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d019      	beq.n	8001d6a <HAL_GPIO_Init+0x1ee>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a47      	ldr	r2, [pc, #284]	@ (8001e58 <HAL_GPIO_Init+0x2dc>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d013      	beq.n	8001d66 <HAL_GPIO_Init+0x1ea>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a46      	ldr	r2, [pc, #280]	@ (8001e5c <HAL_GPIO_Init+0x2e0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d00d      	beq.n	8001d62 <HAL_GPIO_Init+0x1e6>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a45      	ldr	r2, [pc, #276]	@ (8001e60 <HAL_GPIO_Init+0x2e4>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d007      	beq.n	8001d5e <HAL_GPIO_Init+0x1e2>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a44      	ldr	r2, [pc, #272]	@ (8001e64 <HAL_GPIO_Init+0x2e8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d101      	bne.n	8001d5a <HAL_GPIO_Init+0x1de>
 8001d56:	2304      	movs	r3, #4
 8001d58:	e008      	b.n	8001d6c <HAL_GPIO_Init+0x1f0>
 8001d5a:	2305      	movs	r3, #5
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x1f0>
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e004      	b.n	8001d6c <HAL_GPIO_Init+0x1f0>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e002      	b.n	8001d6c <HAL_GPIO_Init+0x1f0>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_GPIO_Init+0x1f0>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	2103      	movs	r1, #3
 8001d70:	400a      	ands	r2, r1
 8001d72:	0092      	lsls	r2, r2, #2
 8001d74:	4093      	lsls	r3, r2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d7c:	4935      	ldr	r1, [pc, #212]	@ (8001e54 <HAL_GPIO_Init+0x2d8>)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	089b      	lsrs	r3, r3, #2
 8001d82:	3302      	adds	r3, #2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d8a:	4b37      	ldr	r3, [pc, #220]	@ (8001e68 <HAL_GPIO_Init+0x2ec>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	43da      	mvns	r2, r3
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	2380      	movs	r3, #128	@ 0x80
 8001da0:	035b      	lsls	r3, r3, #13
 8001da2:	4013      	ands	r3, r2
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dae:	4b2e      	ldr	r3, [pc, #184]	@ (8001e68 <HAL_GPIO_Init+0x2ec>)
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001db4:	4b2c      	ldr	r3, [pc, #176]	@ (8001e68 <HAL_GPIO_Init+0x2ec>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	43da      	mvns	r2, r3
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	2380      	movs	r3, #128	@ 0x80
 8001dca:	039b      	lsls	r3, r3, #14
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dd8:	4b23      	ldr	r3, [pc, #140]	@ (8001e68 <HAL_GPIO_Init+0x2ec>)
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001dde:	4b22      	ldr	r3, [pc, #136]	@ (8001e68 <HAL_GPIO_Init+0x2ec>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43da      	mvns	r2, r3
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	2380      	movs	r3, #128	@ 0x80
 8001df4:	029b      	lsls	r3, r3, #10
 8001df6:	4013      	ands	r3, r2
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e02:	4b19      	ldr	r3, [pc, #100]	@ (8001e68 <HAL_GPIO_Init+0x2ec>)
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001e08:	4b17      	ldr	r3, [pc, #92]	@ (8001e68 <HAL_GPIO_Init+0x2ec>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	43da      	mvns	r2, r3
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	2380      	movs	r3, #128	@ 0x80
 8001e1e:	025b      	lsls	r3, r3, #9
 8001e20:	4013      	ands	r3, r2
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e68 <HAL_GPIO_Init+0x2ec>)
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	3301      	adds	r3, #1
 8001e36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	40da      	lsrs	r2, r3
 8001e40:	1e13      	subs	r3, r2, #0
 8001e42:	d000      	beq.n	8001e46 <HAL_GPIO_Init+0x2ca>
 8001e44:	e6a2      	b.n	8001b8c <HAL_GPIO_Init+0x10>
  } 
}
 8001e46:	46c0      	nop			@ (mov r8, r8)
 8001e48:	46c0      	nop			@ (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b006      	add	sp, #24
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40010000 	.word	0x40010000
 8001e58:	48000400 	.word	0x48000400
 8001e5c:	48000800 	.word	0x48000800
 8001e60:	48000c00 	.word	0x48000c00
 8001e64:	48001000 	.word	0x48001000
 8001e68:	40010400 	.word	0x40010400

08001e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	0008      	movs	r0, r1
 8001e76:	0011      	movs	r1, r2
 8001e78:	1cbb      	adds	r3, r7, #2
 8001e7a:	1c02      	adds	r2, r0, #0
 8001e7c:	801a      	strh	r2, [r3, #0]
 8001e7e:	1c7b      	adds	r3, r7, #1
 8001e80:	1c0a      	adds	r2, r1, #0
 8001e82:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e84:	1c7b      	adds	r3, r7, #1
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d004      	beq.n	8001e96 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e8c:	1cbb      	adds	r3, r7, #2
 8001e8e:	881a      	ldrh	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e94:	e003      	b.n	8001e9e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e96:	1cbb      	adds	r3, r7, #2
 8001e98:	881a      	ldrh	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e9e:	46c0      	nop			@ (mov r8, r8)
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b002      	add	sp, #8
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	0002      	movs	r2, r0
 8001eb0:	1dbb      	adds	r3, r7, #6
 8001eb2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001eb4:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	1dba      	adds	r2, r7, #6
 8001eba:	8812      	ldrh	r2, [r2, #0]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d008      	beq.n	8001ed2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001ec2:	1dba      	adds	r2, r7, #6
 8001ec4:	8812      	ldrh	r2, [r2, #0]
 8001ec6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ec8:	1dbb      	adds	r3, r7, #6
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f000 f807 	bl	8001ee0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ed2:	46c0      	nop			@ (mov r8, r8)
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b002      	add	sp, #8
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	46c0      	nop			@ (mov r8, r8)
 8001edc:	40010400 	.word	0x40010400

08001ee0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	1dbb      	adds	r3, r7, #6
 8001eea:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001eec:	46c0      	nop			@ (mov r8, r8)
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b002      	add	sp, #8
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ef4:	b590      	push	{r4, r7, lr}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e0e4      	b.n	80020d0 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a73      	ldr	r2, [pc, #460]	@ (80020d8 <HAL_PCD_Init+0x1e4>)
 8001f0a:	5c9b      	ldrb	r3, [r3, r2]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d108      	bne.n	8001f24 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	23a4      	movs	r3, #164	@ 0xa4
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	2100      	movs	r1, #0
 8001f1a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f7fe fc58 	bl	80007d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a6c      	ldr	r2, [pc, #432]	@ (80020d8 <HAL_PCD_Init+0x1e4>)
 8001f28:	2103      	movs	r1, #3
 8001f2a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	0018      	movs	r0, r3
 8001f32:	f000 fecd 	bl	8002cd0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f36:	230f      	movs	r3, #15
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
 8001f3e:	e047      	b.n	8001fd0 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f40:	200f      	movs	r0, #15
 8001f42:	183b      	adds	r3, r7, r0
 8001f44:	781a      	ldrb	r2, [r3, #0]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	0013      	movs	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	189b      	adds	r3, r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	18cb      	adds	r3, r1, r3
 8001f52:	3311      	adds	r3, #17
 8001f54:	2201      	movs	r2, #1
 8001f56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f58:	183b      	adds	r3, r7, r0
 8001f5a:	781a      	ldrb	r2, [r3, #0]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	0013      	movs	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	189b      	adds	r3, r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	18cb      	adds	r3, r1, r3
 8001f68:	3310      	adds	r3, #16
 8001f6a:	183a      	adds	r2, r7, r0
 8001f6c:	7812      	ldrb	r2, [r2, #0]
 8001f6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f70:	183b      	adds	r3, r7, r0
 8001f72:	781a      	ldrb	r2, [r3, #0]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	0013      	movs	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	189b      	adds	r3, r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	18cb      	adds	r3, r1, r3
 8001f80:	3313      	adds	r3, #19
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f86:	183b      	adds	r3, r7, r0
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	0013      	movs	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	189b      	adds	r3, r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	18cb      	adds	r3, r1, r3
 8001f96:	3320      	adds	r3, #32
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f9c:	183b      	adds	r3, r7, r0
 8001f9e:	781a      	ldrb	r2, [r3, #0]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	0013      	movs	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	189b      	adds	r3, r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	18cb      	adds	r3, r1, r3
 8001fac:	3324      	adds	r3, #36	@ 0x24
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fb2:	183b      	adds	r3, r7, r0
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	1c5a      	adds	r2, r3, #1
 8001fba:	0013      	movs	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	189b      	adds	r3, r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc6:	183b      	adds	r3, r7, r0
 8001fc8:	781a      	ldrb	r2, [r3, #0]
 8001fca:	183b      	adds	r3, r7, r0
 8001fcc:	3201      	adds	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	791b      	ldrb	r3, [r3, #4]
 8001fd4:	210f      	movs	r1, #15
 8001fd6:	187a      	adds	r2, r7, r1
 8001fd8:	7812      	ldrb	r2, [r2, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d3b0      	bcc.n	8001f40 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fde:	187b      	adds	r3, r7, r1
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
 8001fe4:	e056      	b.n	8002094 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fe6:	240f      	movs	r4, #15
 8001fe8:	193b      	adds	r3, r7, r4
 8001fea:	781a      	ldrb	r2, [r3, #0]
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	2352      	movs	r3, #82	@ 0x52
 8001ff0:	33ff      	adds	r3, #255	@ 0xff
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	0013      	movs	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	189b      	adds	r3, r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	18c3      	adds	r3, r0, r3
 8001ffe:	185b      	adds	r3, r3, r1
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002004:	193b      	adds	r3, r7, r4
 8002006:	781a      	ldrb	r2, [r3, #0]
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	23a8      	movs	r3, #168	@ 0xa8
 800200c:	0059      	lsls	r1, r3, #1
 800200e:	0013      	movs	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	189b      	adds	r3, r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	18c3      	adds	r3, r0, r3
 8002018:	185b      	adds	r3, r3, r1
 800201a:	193a      	adds	r2, r7, r4
 800201c:	7812      	ldrb	r2, [r2, #0]
 800201e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002020:	193b      	adds	r3, r7, r4
 8002022:	781a      	ldrb	r2, [r3, #0]
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	2354      	movs	r3, #84	@ 0x54
 8002028:	33ff      	adds	r3, #255	@ 0xff
 800202a:	0019      	movs	r1, r3
 800202c:	0013      	movs	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	189b      	adds	r3, r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	18c3      	adds	r3, r0, r3
 8002036:	185b      	adds	r3, r3, r1
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800203c:	193b      	adds	r3, r7, r4
 800203e:	781a      	ldrb	r2, [r3, #0]
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	23b0      	movs	r3, #176	@ 0xb0
 8002044:	0059      	lsls	r1, r3, #1
 8002046:	0013      	movs	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	189b      	adds	r3, r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	18c3      	adds	r3, r0, r3
 8002050:	185b      	adds	r3, r3, r1
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002056:	193b      	adds	r3, r7, r4
 8002058:	781a      	ldrb	r2, [r3, #0]
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	23b2      	movs	r3, #178	@ 0xb2
 800205e:	0059      	lsls	r1, r3, #1
 8002060:	0013      	movs	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	189b      	adds	r3, r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	18c3      	adds	r3, r0, r3
 800206a:	185b      	adds	r3, r3, r1
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002070:	193b      	adds	r3, r7, r4
 8002072:	781a      	ldrb	r2, [r3, #0]
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	23b4      	movs	r3, #180	@ 0xb4
 8002078:	0059      	lsls	r1, r3, #1
 800207a:	0013      	movs	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	189b      	adds	r3, r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	18c3      	adds	r3, r0, r3
 8002084:	185b      	adds	r3, r3, r1
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800208a:	193b      	adds	r3, r7, r4
 800208c:	781a      	ldrb	r2, [r3, #0]
 800208e:	193b      	adds	r3, r7, r4
 8002090:	3201      	adds	r2, #1
 8002092:	701a      	strb	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	791b      	ldrb	r3, [r3, #4]
 8002098:	220f      	movs	r2, #15
 800209a:	18ba      	adds	r2, r7, r2
 800209c:	7812      	ldrb	r2, [r2, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d3a1      	bcc.n	8001fe6 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6818      	ldr	r0, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6859      	ldr	r1, [r3, #4]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	f000 fe2a 	bl	8002d04 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a07      	ldr	r2, [pc, #28]	@ (80020d8 <HAL_PCD_Init+0x1e4>)
 80020ba:	2101      	movs	r1, #1
 80020bc:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	7a9b      	ldrb	r3, [r3, #10]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d103      	bne.n	80020ce <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f000 f807 	bl	80020dc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	0018      	movs	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b005      	add	sp, #20
 80020d6:	bd90      	pop	{r4, r7, pc}
 80020d8:	00000291 	.word	0x00000291

080020dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	23b4      	movs	r3, #180	@ 0xb4
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	2101      	movs	r1, #1
 80020f2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	23b2      	movs	r3, #178	@ 0xb2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	2100      	movs	r1, #0
 80020fc:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2254      	movs	r2, #84	@ 0x54
 8002102:	5a9b      	ldrh	r3, [r3, r2]
 8002104:	b29b      	uxth	r3, r3
 8002106:	2201      	movs	r2, #1
 8002108:	4313      	orrs	r3, r2
 800210a:	b299      	uxth	r1, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2254      	movs	r2, #84	@ 0x54
 8002110:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2254      	movs	r2, #84	@ 0x54
 8002116:	5a9b      	ldrh	r3, [r3, r2]
 8002118:	b29b      	uxth	r3, r3
 800211a:	2202      	movs	r2, #2
 800211c:	4313      	orrs	r3, r2
 800211e:	b299      	uxth	r1, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2254      	movs	r2, #84	@ 0x54
 8002124:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	0018      	movs	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	b004      	add	sp, #16
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d102      	bne.n	8002144 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	f000 fb76 	bl	8002830 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2201      	movs	r2, #1
 800214a:	4013      	ands	r3, r2
 800214c:	d100      	bne.n	8002150 <HAL_RCC_OscConfig+0x20>
 800214e:	e08e      	b.n	800226e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002150:	4bc5      	ldr	r3, [pc, #788]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	220c      	movs	r2, #12
 8002156:	4013      	ands	r3, r2
 8002158:	2b04      	cmp	r3, #4
 800215a:	d00e      	beq.n	800217a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800215c:	4bc2      	ldr	r3, [pc, #776]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	220c      	movs	r2, #12
 8002162:	4013      	ands	r3, r2
 8002164:	2b08      	cmp	r3, #8
 8002166:	d117      	bne.n	8002198 <HAL_RCC_OscConfig+0x68>
 8002168:	4bbf      	ldr	r3, [pc, #764]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	23c0      	movs	r3, #192	@ 0xc0
 800216e:	025b      	lsls	r3, r3, #9
 8002170:	401a      	ands	r2, r3
 8002172:	2380      	movs	r3, #128	@ 0x80
 8002174:	025b      	lsls	r3, r3, #9
 8002176:	429a      	cmp	r2, r3
 8002178:	d10e      	bne.n	8002198 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217a:	4bbb      	ldr	r3, [pc, #748]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	2380      	movs	r3, #128	@ 0x80
 8002180:	029b      	lsls	r3, r3, #10
 8002182:	4013      	ands	r3, r2
 8002184:	d100      	bne.n	8002188 <HAL_RCC_OscConfig+0x58>
 8002186:	e071      	b.n	800226c <HAL_RCC_OscConfig+0x13c>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d000      	beq.n	8002192 <HAL_RCC_OscConfig+0x62>
 8002190:	e06c      	b.n	800226c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	f000 fb4c 	bl	8002830 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d107      	bne.n	80021b0 <HAL_RCC_OscConfig+0x80>
 80021a0:	4bb1      	ldr	r3, [pc, #708]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4bb0      	ldr	r3, [pc, #704]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80021a6:	2180      	movs	r1, #128	@ 0x80
 80021a8:	0249      	lsls	r1, r1, #9
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e02f      	b.n	8002210 <HAL_RCC_OscConfig+0xe0>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10c      	bne.n	80021d2 <HAL_RCC_OscConfig+0xa2>
 80021b8:	4bab      	ldr	r3, [pc, #684]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4baa      	ldr	r3, [pc, #680]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80021be:	49ab      	ldr	r1, [pc, #684]	@ (800246c <HAL_RCC_OscConfig+0x33c>)
 80021c0:	400a      	ands	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	4ba8      	ldr	r3, [pc, #672]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4ba7      	ldr	r3, [pc, #668]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80021ca:	49a9      	ldr	r1, [pc, #676]	@ (8002470 <HAL_RCC_OscConfig+0x340>)
 80021cc:	400a      	ands	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	e01e      	b.n	8002210 <HAL_RCC_OscConfig+0xe0>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b05      	cmp	r3, #5
 80021d8:	d10e      	bne.n	80021f8 <HAL_RCC_OscConfig+0xc8>
 80021da:	4ba3      	ldr	r3, [pc, #652]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	4ba2      	ldr	r3, [pc, #648]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80021e0:	2180      	movs	r1, #128	@ 0x80
 80021e2:	02c9      	lsls	r1, r1, #11
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	4b9f      	ldr	r3, [pc, #636]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b9e      	ldr	r3, [pc, #632]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80021ee:	2180      	movs	r1, #128	@ 0x80
 80021f0:	0249      	lsls	r1, r1, #9
 80021f2:	430a      	orrs	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	e00b      	b.n	8002210 <HAL_RCC_OscConfig+0xe0>
 80021f8:	4b9b      	ldr	r3, [pc, #620]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b9a      	ldr	r3, [pc, #616]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80021fe:	499b      	ldr	r1, [pc, #620]	@ (800246c <HAL_RCC_OscConfig+0x33c>)
 8002200:	400a      	ands	r2, r1
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	4b98      	ldr	r3, [pc, #608]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b97      	ldr	r3, [pc, #604]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 800220a:	4999      	ldr	r1, [pc, #612]	@ (8002470 <HAL_RCC_OscConfig+0x340>)
 800220c:	400a      	ands	r2, r1
 800220e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d014      	beq.n	8002242 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7fe fbbc 	bl	8000994 <HAL_GetTick>
 800221c:	0003      	movs	r3, r0
 800221e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002222:	f7fe fbb7 	bl	8000994 <HAL_GetTick>
 8002226:	0002      	movs	r2, r0
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b64      	cmp	r3, #100	@ 0x64
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e2fd      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002234:	4b8c      	ldr	r3, [pc, #560]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	2380      	movs	r3, #128	@ 0x80
 800223a:	029b      	lsls	r3, r3, #10
 800223c:	4013      	ands	r3, r2
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0xf2>
 8002240:	e015      	b.n	800226e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002242:	f7fe fba7 	bl	8000994 <HAL_GetTick>
 8002246:	0003      	movs	r3, r0
 8002248:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224c:	f7fe fba2 	bl	8000994 <HAL_GetTick>
 8002250:	0002      	movs	r2, r0
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	@ 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e2e8      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225e:	4b82      	ldr	r3, [pc, #520]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	2380      	movs	r3, #128	@ 0x80
 8002264:	029b      	lsls	r3, r3, #10
 8002266:	4013      	ands	r3, r2
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x11c>
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2202      	movs	r2, #2
 8002274:	4013      	ands	r3, r2
 8002276:	d100      	bne.n	800227a <HAL_RCC_OscConfig+0x14a>
 8002278:	e06c      	b.n	8002354 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800227a:	4b7b      	ldr	r3, [pc, #492]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	220c      	movs	r2, #12
 8002280:	4013      	ands	r3, r2
 8002282:	d00e      	beq.n	80022a2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002284:	4b78      	ldr	r3, [pc, #480]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	220c      	movs	r2, #12
 800228a:	4013      	ands	r3, r2
 800228c:	2b08      	cmp	r3, #8
 800228e:	d11f      	bne.n	80022d0 <HAL_RCC_OscConfig+0x1a0>
 8002290:	4b75      	ldr	r3, [pc, #468]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	23c0      	movs	r3, #192	@ 0xc0
 8002296:	025b      	lsls	r3, r3, #9
 8002298:	401a      	ands	r2, r3
 800229a:	2380      	movs	r3, #128	@ 0x80
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	429a      	cmp	r2, r3
 80022a0:	d116      	bne.n	80022d0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a2:	4b71      	ldr	r3, [pc, #452]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2202      	movs	r2, #2
 80022a8:	4013      	ands	r3, r2
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_OscConfig+0x188>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d001      	beq.n	80022b8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e2bb      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b8:	4b6b      	ldr	r3, [pc, #428]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	22f8      	movs	r2, #248	@ 0xf8
 80022be:	4393      	bics	r3, r2
 80022c0:	0019      	movs	r1, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	00da      	lsls	r2, r3, #3
 80022c8:	4b67      	ldr	r3, [pc, #412]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80022ca:	430a      	orrs	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ce:	e041      	b.n	8002354 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d024      	beq.n	8002322 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d8:	4b63      	ldr	r3, [pc, #396]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b62      	ldr	r3, [pc, #392]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80022de:	2101      	movs	r1, #1
 80022e0:	430a      	orrs	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7fe fb56 	bl	8000994 <HAL_GetTick>
 80022e8:	0003      	movs	r3, r0
 80022ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ee:	f7fe fb51 	bl	8000994 <HAL_GetTick>
 80022f2:	0002      	movs	r2, r0
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e297      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002300:	4b59      	ldr	r3, [pc, #356]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2202      	movs	r2, #2
 8002306:	4013      	ands	r3, r2
 8002308:	d0f1      	beq.n	80022ee <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230a:	4b57      	ldr	r3, [pc, #348]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	22f8      	movs	r2, #248	@ 0xf8
 8002310:	4393      	bics	r3, r2
 8002312:	0019      	movs	r1, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	00da      	lsls	r2, r3, #3
 800231a:	4b53      	ldr	r3, [pc, #332]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 800231c:	430a      	orrs	r2, r1
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e018      	b.n	8002354 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002322:	4b51      	ldr	r3, [pc, #324]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	4b50      	ldr	r3, [pc, #320]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 8002328:	2101      	movs	r1, #1
 800232a:	438a      	bics	r2, r1
 800232c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232e:	f7fe fb31 	bl	8000994 <HAL_GetTick>
 8002332:	0003      	movs	r3, r0
 8002334:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002338:	f7fe fb2c 	bl	8000994 <HAL_GetTick>
 800233c:	0002      	movs	r2, r0
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e272      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234a:	4b47      	ldr	r3, [pc, #284]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2202      	movs	r2, #2
 8002350:	4013      	ands	r3, r2
 8002352:	d1f1      	bne.n	8002338 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2208      	movs	r2, #8
 800235a:	4013      	ands	r3, r2
 800235c:	d036      	beq.n	80023cc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d019      	beq.n	800239a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002366:	4b40      	ldr	r3, [pc, #256]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 8002368:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800236a:	4b3f      	ldr	r3, [pc, #252]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 800236c:	2101      	movs	r1, #1
 800236e:	430a      	orrs	r2, r1
 8002370:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002372:	f7fe fb0f 	bl	8000994 <HAL_GetTick>
 8002376:	0003      	movs	r3, r0
 8002378:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237c:	f7fe fb0a 	bl	8000994 <HAL_GetTick>
 8002380:	0002      	movs	r2, r0
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e250      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238e:	4b36      	ldr	r3, [pc, #216]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 8002390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002392:	2202      	movs	r2, #2
 8002394:	4013      	ands	r3, r2
 8002396:	d0f1      	beq.n	800237c <HAL_RCC_OscConfig+0x24c>
 8002398:	e018      	b.n	80023cc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239a:	4b33      	ldr	r3, [pc, #204]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 800239c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800239e:	4b32      	ldr	r3, [pc, #200]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80023a0:	2101      	movs	r1, #1
 80023a2:	438a      	bics	r2, r1
 80023a4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a6:	f7fe faf5 	bl	8000994 <HAL_GetTick>
 80023aa:	0003      	movs	r3, r0
 80023ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b0:	f7fe faf0 	bl	8000994 <HAL_GetTick>
 80023b4:	0002      	movs	r2, r0
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e236      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c2:	4b29      	ldr	r3, [pc, #164]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80023c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c6:	2202      	movs	r2, #2
 80023c8:	4013      	ands	r3, r2
 80023ca:	d1f1      	bne.n	80023b0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2204      	movs	r2, #4
 80023d2:	4013      	ands	r3, r2
 80023d4:	d100      	bne.n	80023d8 <HAL_RCC_OscConfig+0x2a8>
 80023d6:	e0b5      	b.n	8002544 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d8:	201f      	movs	r0, #31
 80023da:	183b      	adds	r3, r7, r0
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e0:	4b21      	ldr	r3, [pc, #132]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80023e2:	69da      	ldr	r2, [r3, #28]
 80023e4:	2380      	movs	r3, #128	@ 0x80
 80023e6:	055b      	lsls	r3, r3, #21
 80023e8:	4013      	ands	r3, r2
 80023ea:	d110      	bne.n	800240e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80023ee:	69da      	ldr	r2, [r3, #28]
 80023f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80023f2:	2180      	movs	r1, #128	@ 0x80
 80023f4:	0549      	lsls	r1, r1, #21
 80023f6:	430a      	orrs	r2, r1
 80023f8:	61da      	str	r2, [r3, #28]
 80023fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 80023fc:	69da      	ldr	r2, [r3, #28]
 80023fe:	2380      	movs	r3, #128	@ 0x80
 8002400:	055b      	lsls	r3, r3, #21
 8002402:	4013      	ands	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002408:	183b      	adds	r3, r7, r0
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240e:	4b19      	ldr	r3, [pc, #100]	@ (8002474 <HAL_RCC_OscConfig+0x344>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	2380      	movs	r3, #128	@ 0x80
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4013      	ands	r3, r2
 8002418:	d11a      	bne.n	8002450 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241a:	4b16      	ldr	r3, [pc, #88]	@ (8002474 <HAL_RCC_OscConfig+0x344>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	4b15      	ldr	r3, [pc, #84]	@ (8002474 <HAL_RCC_OscConfig+0x344>)
 8002420:	2180      	movs	r1, #128	@ 0x80
 8002422:	0049      	lsls	r1, r1, #1
 8002424:	430a      	orrs	r2, r1
 8002426:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002428:	f7fe fab4 	bl	8000994 <HAL_GetTick>
 800242c:	0003      	movs	r3, r0
 800242e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002432:	f7fe faaf 	bl	8000994 <HAL_GetTick>
 8002436:	0002      	movs	r2, r0
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b64      	cmp	r3, #100	@ 0x64
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e1f5      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002444:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <HAL_RCC_OscConfig+0x344>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	2380      	movs	r3, #128	@ 0x80
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4013      	ands	r3, r2
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d10f      	bne.n	8002478 <HAL_RCC_OscConfig+0x348>
 8002458:	4b03      	ldr	r3, [pc, #12]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 800245a:	6a1a      	ldr	r2, [r3, #32]
 800245c:	4b02      	ldr	r3, [pc, #8]	@ (8002468 <HAL_RCC_OscConfig+0x338>)
 800245e:	2101      	movs	r1, #1
 8002460:	430a      	orrs	r2, r1
 8002462:	621a      	str	r2, [r3, #32]
 8002464:	e036      	b.n	80024d4 <HAL_RCC_OscConfig+0x3a4>
 8002466:	46c0      	nop			@ (mov r8, r8)
 8002468:	40021000 	.word	0x40021000
 800246c:	fffeffff 	.word	0xfffeffff
 8002470:	fffbffff 	.word	0xfffbffff
 8002474:	40007000 	.word	0x40007000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10c      	bne.n	800249a <HAL_RCC_OscConfig+0x36a>
 8002480:	4bca      	ldr	r3, [pc, #808]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002482:	6a1a      	ldr	r2, [r3, #32]
 8002484:	4bc9      	ldr	r3, [pc, #804]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002486:	2101      	movs	r1, #1
 8002488:	438a      	bics	r2, r1
 800248a:	621a      	str	r2, [r3, #32]
 800248c:	4bc7      	ldr	r3, [pc, #796]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 800248e:	6a1a      	ldr	r2, [r3, #32]
 8002490:	4bc6      	ldr	r3, [pc, #792]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002492:	2104      	movs	r1, #4
 8002494:	438a      	bics	r2, r1
 8002496:	621a      	str	r2, [r3, #32]
 8002498:	e01c      	b.n	80024d4 <HAL_RCC_OscConfig+0x3a4>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b05      	cmp	r3, #5
 80024a0:	d10c      	bne.n	80024bc <HAL_RCC_OscConfig+0x38c>
 80024a2:	4bc2      	ldr	r3, [pc, #776]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80024a4:	6a1a      	ldr	r2, [r3, #32]
 80024a6:	4bc1      	ldr	r3, [pc, #772]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80024a8:	2104      	movs	r1, #4
 80024aa:	430a      	orrs	r2, r1
 80024ac:	621a      	str	r2, [r3, #32]
 80024ae:	4bbf      	ldr	r3, [pc, #764]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80024b0:	6a1a      	ldr	r2, [r3, #32]
 80024b2:	4bbe      	ldr	r3, [pc, #760]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80024b4:	2101      	movs	r1, #1
 80024b6:	430a      	orrs	r2, r1
 80024b8:	621a      	str	r2, [r3, #32]
 80024ba:	e00b      	b.n	80024d4 <HAL_RCC_OscConfig+0x3a4>
 80024bc:	4bbb      	ldr	r3, [pc, #748]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80024be:	6a1a      	ldr	r2, [r3, #32]
 80024c0:	4bba      	ldr	r3, [pc, #744]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80024c2:	2101      	movs	r1, #1
 80024c4:	438a      	bics	r2, r1
 80024c6:	621a      	str	r2, [r3, #32]
 80024c8:	4bb8      	ldr	r3, [pc, #736]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80024ca:	6a1a      	ldr	r2, [r3, #32]
 80024cc:	4bb7      	ldr	r3, [pc, #732]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80024ce:	2104      	movs	r1, #4
 80024d0:	438a      	bics	r2, r1
 80024d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d014      	beq.n	8002506 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024dc:	f7fe fa5a 	bl	8000994 <HAL_GetTick>
 80024e0:	0003      	movs	r3, r0
 80024e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e4:	e009      	b.n	80024fa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e6:	f7fe fa55 	bl	8000994 <HAL_GetTick>
 80024ea:	0002      	movs	r2, r0
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	4aaf      	ldr	r2, [pc, #700]	@ (80027b0 <HAL_RCC_OscConfig+0x680>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e19a      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fa:	4bac      	ldr	r3, [pc, #688]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	2202      	movs	r2, #2
 8002500:	4013      	ands	r3, r2
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x3b6>
 8002504:	e013      	b.n	800252e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002506:	f7fe fa45 	bl	8000994 <HAL_GetTick>
 800250a:	0003      	movs	r3, r0
 800250c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800250e:	e009      	b.n	8002524 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002510:	f7fe fa40 	bl	8000994 <HAL_GetTick>
 8002514:	0002      	movs	r2, r0
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	4aa5      	ldr	r2, [pc, #660]	@ (80027b0 <HAL_RCC_OscConfig+0x680>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e185      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002524:	4ba1      	ldr	r3, [pc, #644]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	2202      	movs	r2, #2
 800252a:	4013      	ands	r3, r2
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800252e:	231f      	movs	r3, #31
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d105      	bne.n	8002544 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002538:	4b9c      	ldr	r3, [pc, #624]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 800253a:	69da      	ldr	r2, [r3, #28]
 800253c:	4b9b      	ldr	r3, [pc, #620]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 800253e:	499d      	ldr	r1, [pc, #628]	@ (80027b4 <HAL_RCC_OscConfig+0x684>)
 8002540:	400a      	ands	r2, r1
 8002542:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2210      	movs	r2, #16
 800254a:	4013      	ands	r3, r2
 800254c:	d063      	beq.n	8002616 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d12a      	bne.n	80025ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002556:	4b95      	ldr	r3, [pc, #596]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002558:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800255a:	4b94      	ldr	r3, [pc, #592]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 800255c:	2104      	movs	r1, #4
 800255e:	430a      	orrs	r2, r1
 8002560:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002562:	4b92      	ldr	r3, [pc, #584]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002564:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002566:	4b91      	ldr	r3, [pc, #580]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002568:	2101      	movs	r1, #1
 800256a:	430a      	orrs	r2, r1
 800256c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256e:	f7fe fa11 	bl	8000994 <HAL_GetTick>
 8002572:	0003      	movs	r3, r0
 8002574:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002578:	f7fe fa0c 	bl	8000994 <HAL_GetTick>
 800257c:	0002      	movs	r2, r0
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e152      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800258a:	4b88      	ldr	r3, [pc, #544]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 800258c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800258e:	2202      	movs	r2, #2
 8002590:	4013      	ands	r3, r2
 8002592:	d0f1      	beq.n	8002578 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002594:	4b85      	ldr	r3, [pc, #532]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002598:	22f8      	movs	r2, #248	@ 0xf8
 800259a:	4393      	bics	r3, r2
 800259c:	0019      	movs	r1, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	00da      	lsls	r2, r3, #3
 80025a4:	4b81      	ldr	r3, [pc, #516]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80025a6:	430a      	orrs	r2, r1
 80025a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80025aa:	e034      	b.n	8002616 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	3305      	adds	r3, #5
 80025b2:	d111      	bne.n	80025d8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80025b4:	4b7d      	ldr	r3, [pc, #500]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80025b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025b8:	4b7c      	ldr	r3, [pc, #496]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80025ba:	2104      	movs	r1, #4
 80025bc:	438a      	bics	r2, r1
 80025be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80025c0:	4b7a      	ldr	r3, [pc, #488]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80025c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025c4:	22f8      	movs	r2, #248	@ 0xf8
 80025c6:	4393      	bics	r3, r2
 80025c8:	0019      	movs	r1, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	00da      	lsls	r2, r3, #3
 80025d0:	4b76      	ldr	r3, [pc, #472]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80025d2:	430a      	orrs	r2, r1
 80025d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80025d6:	e01e      	b.n	8002616 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80025d8:	4b74      	ldr	r3, [pc, #464]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80025da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025dc:	4b73      	ldr	r3, [pc, #460]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80025de:	2104      	movs	r1, #4
 80025e0:	430a      	orrs	r2, r1
 80025e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80025e4:	4b71      	ldr	r3, [pc, #452]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80025e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025e8:	4b70      	ldr	r3, [pc, #448]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80025ea:	2101      	movs	r1, #1
 80025ec:	438a      	bics	r2, r1
 80025ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f0:	f7fe f9d0 	bl	8000994 <HAL_GetTick>
 80025f4:	0003      	movs	r3, r0
 80025f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025fa:	f7fe f9cb 	bl	8000994 <HAL_GetTick>
 80025fe:	0002      	movs	r2, r0
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e111      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800260c:	4b67      	ldr	r3, [pc, #412]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 800260e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002610:	2202      	movs	r2, #2
 8002612:	4013      	ands	r3, r2
 8002614:	d1f1      	bne.n	80025fa <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2220      	movs	r2, #32
 800261c:	4013      	ands	r3, r2
 800261e:	d05c      	beq.n	80026da <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002620:	4b62      	ldr	r3, [pc, #392]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	220c      	movs	r2, #12
 8002626:	4013      	ands	r3, r2
 8002628:	2b0c      	cmp	r3, #12
 800262a:	d00e      	beq.n	800264a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800262c:	4b5f      	ldr	r3, [pc, #380]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	220c      	movs	r2, #12
 8002632:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002634:	2b08      	cmp	r3, #8
 8002636:	d114      	bne.n	8002662 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002638:	4b5c      	ldr	r3, [pc, #368]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	23c0      	movs	r3, #192	@ 0xc0
 800263e:	025b      	lsls	r3, r3, #9
 8002640:	401a      	ands	r2, r3
 8002642:	23c0      	movs	r3, #192	@ 0xc0
 8002644:	025b      	lsls	r3, r3, #9
 8002646:	429a      	cmp	r2, r3
 8002648:	d10b      	bne.n	8002662 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800264a:	4b58      	ldr	r3, [pc, #352]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 800264c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800264e:	2380      	movs	r3, #128	@ 0x80
 8002650:	029b      	lsls	r3, r3, #10
 8002652:	4013      	ands	r3, r2
 8002654:	d040      	beq.n	80026d8 <HAL_RCC_OscConfig+0x5a8>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d03c      	beq.n	80026d8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e0e6      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d01b      	beq.n	80026a2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800266a:	4b50      	ldr	r3, [pc, #320]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 800266c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800266e:	4b4f      	ldr	r3, [pc, #316]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002670:	2180      	movs	r1, #128	@ 0x80
 8002672:	0249      	lsls	r1, r1, #9
 8002674:	430a      	orrs	r2, r1
 8002676:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7fe f98c 	bl	8000994 <HAL_GetTick>
 800267c:	0003      	movs	r3, r0
 800267e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002682:	f7fe f987 	bl	8000994 <HAL_GetTick>
 8002686:	0002      	movs	r2, r0
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e0cd      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002694:	4b45      	ldr	r3, [pc, #276]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002698:	2380      	movs	r3, #128	@ 0x80
 800269a:	029b      	lsls	r3, r3, #10
 800269c:	4013      	ands	r3, r2
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x552>
 80026a0:	e01b      	b.n	80026da <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80026a2:	4b42      	ldr	r3, [pc, #264]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80026a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026a6:	4b41      	ldr	r3, [pc, #260]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80026a8:	4943      	ldr	r1, [pc, #268]	@ (80027b8 <HAL_RCC_OscConfig+0x688>)
 80026aa:	400a      	ands	r2, r1
 80026ac:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ae:	f7fe f971 	bl	8000994 <HAL_GetTick>
 80026b2:	0003      	movs	r3, r0
 80026b4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026b8:	f7fe f96c 	bl	8000994 <HAL_GetTick>
 80026bc:	0002      	movs	r2, r0
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e0b2      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80026ca:	4b38      	ldr	r3, [pc, #224]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80026cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026ce:	2380      	movs	r3, #128	@ 0x80
 80026d0:	029b      	lsls	r3, r3, #10
 80026d2:	4013      	ands	r3, r2
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x588>
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80026d8:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d100      	bne.n	80026e4 <HAL_RCC_OscConfig+0x5b4>
 80026e2:	e0a4      	b.n	800282e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026e4:	4b31      	ldr	r3, [pc, #196]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	220c      	movs	r2, #12
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d100      	bne.n	80026f2 <HAL_RCC_OscConfig+0x5c2>
 80026f0:	e078      	b.n	80027e4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d14c      	bne.n	8002794 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fa:	4b2c      	ldr	r3, [pc, #176]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4b2b      	ldr	r3, [pc, #172]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002700:	492e      	ldr	r1, [pc, #184]	@ (80027bc <HAL_RCC_OscConfig+0x68c>)
 8002702:	400a      	ands	r2, r1
 8002704:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7fe f945 	bl	8000994 <HAL_GetTick>
 800270a:	0003      	movs	r3, r0
 800270c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002710:	f7fe f940 	bl	8000994 <HAL_GetTick>
 8002714:	0002      	movs	r2, r0
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e086      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002722:	4b22      	ldr	r3, [pc, #136]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	2380      	movs	r3, #128	@ 0x80
 8002728:	049b      	lsls	r3, r3, #18
 800272a:	4013      	ands	r3, r2
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800272e:	4b1f      	ldr	r3, [pc, #124]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002732:	220f      	movs	r2, #15
 8002734:	4393      	bics	r3, r2
 8002736:	0019      	movs	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800273c:	4b1b      	ldr	r3, [pc, #108]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 800273e:	430a      	orrs	r2, r1
 8002740:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002742:	4b1a      	ldr	r3, [pc, #104]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4a1e      	ldr	r2, [pc, #120]	@ (80027c0 <HAL_RCC_OscConfig+0x690>)
 8002748:	4013      	ands	r3, r2
 800274a:	0019      	movs	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002754:	431a      	orrs	r2, r3
 8002756:	4b15      	ldr	r3, [pc, #84]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002758:	430a      	orrs	r2, r1
 800275a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800275c:	4b13      	ldr	r3, [pc, #76]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b12      	ldr	r3, [pc, #72]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002762:	2180      	movs	r1, #128	@ 0x80
 8002764:	0449      	lsls	r1, r1, #17
 8002766:	430a      	orrs	r2, r1
 8002768:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276a:	f7fe f913 	bl	8000994 <HAL_GetTick>
 800276e:	0003      	movs	r3, r0
 8002770:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002774:	f7fe f90e 	bl	8000994 <HAL_GetTick>
 8002778:	0002      	movs	r2, r0
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e054      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002786:	4b09      	ldr	r3, [pc, #36]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	2380      	movs	r3, #128	@ 0x80
 800278c:	049b      	lsls	r3, r3, #18
 800278e:	4013      	ands	r3, r2
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x644>
 8002792:	e04c      	b.n	800282e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002794:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b04      	ldr	r3, [pc, #16]	@ (80027ac <HAL_RCC_OscConfig+0x67c>)
 800279a:	4908      	ldr	r1, [pc, #32]	@ (80027bc <HAL_RCC_OscConfig+0x68c>)
 800279c:	400a      	ands	r2, r1
 800279e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7fe f8f8 	bl	8000994 <HAL_GetTick>
 80027a4:	0003      	movs	r3, r0
 80027a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a8:	e015      	b.n	80027d6 <HAL_RCC_OscConfig+0x6a6>
 80027aa:	46c0      	nop			@ (mov r8, r8)
 80027ac:	40021000 	.word	0x40021000
 80027b0:	00001388 	.word	0x00001388
 80027b4:	efffffff 	.word	0xefffffff
 80027b8:	fffeffff 	.word	0xfffeffff
 80027bc:	feffffff 	.word	0xfeffffff
 80027c0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c4:	f7fe f8e6 	bl	8000994 <HAL_GetTick>
 80027c8:	0002      	movs	r2, r0
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e02c      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d6:	4b18      	ldr	r3, [pc, #96]	@ (8002838 <HAL_RCC_OscConfig+0x708>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	2380      	movs	r3, #128	@ 0x80
 80027dc:	049b      	lsls	r3, r3, #18
 80027de:	4013      	ands	r3, r2
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x694>
 80027e2:	e024      	b.n	800282e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e01f      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80027f0:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <HAL_RCC_OscConfig+0x708>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80027f6:	4b10      	ldr	r3, [pc, #64]	@ (8002838 <HAL_RCC_OscConfig+0x708>)
 80027f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fa:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	23c0      	movs	r3, #192	@ 0xc0
 8002800:	025b      	lsls	r3, r3, #9
 8002802:	401a      	ands	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002808:	429a      	cmp	r2, r3
 800280a:	d10e      	bne.n	800282a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	220f      	movs	r2, #15
 8002810:	401a      	ands	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002816:	429a      	cmp	r2, r3
 8002818:	d107      	bne.n	800282a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	23f0      	movs	r3, #240	@ 0xf0
 800281e:	039b      	lsls	r3, r3, #14
 8002820:	401a      	ands	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d001      	beq.n	800282e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	0018      	movs	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	b008      	add	sp, #32
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40021000 	.word	0x40021000

0800283c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0bf      	b.n	80029d0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002850:	4b61      	ldr	r3, [pc, #388]	@ (80029d8 <HAL_RCC_ClockConfig+0x19c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2201      	movs	r2, #1
 8002856:	4013      	ands	r3, r2
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d911      	bls.n	8002882 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	4b5e      	ldr	r3, [pc, #376]	@ (80029d8 <HAL_RCC_ClockConfig+0x19c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2201      	movs	r2, #1
 8002864:	4393      	bics	r3, r2
 8002866:	0019      	movs	r1, r3
 8002868:	4b5b      	ldr	r3, [pc, #364]	@ (80029d8 <HAL_RCC_ClockConfig+0x19c>)
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002870:	4b59      	ldr	r3, [pc, #356]	@ (80029d8 <HAL_RCC_ClockConfig+0x19c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2201      	movs	r2, #1
 8002876:	4013      	ands	r3, r2
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d001      	beq.n	8002882 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e0a6      	b.n	80029d0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2202      	movs	r2, #2
 8002888:	4013      	ands	r3, r2
 800288a:	d015      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2204      	movs	r2, #4
 8002892:	4013      	ands	r3, r2
 8002894:	d006      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002896:	4b51      	ldr	r3, [pc, #324]	@ (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	4b50      	ldr	r3, [pc, #320]	@ (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 800289c:	21e0      	movs	r1, #224	@ 0xe0
 800289e:	00c9      	lsls	r1, r1, #3
 80028a0:	430a      	orrs	r2, r1
 80028a2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a4:	4b4d      	ldr	r3, [pc, #308]	@ (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	22f0      	movs	r2, #240	@ 0xf0
 80028aa:	4393      	bics	r3, r2
 80028ac:	0019      	movs	r1, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	4b4a      	ldr	r3, [pc, #296]	@ (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 80028b4:	430a      	orrs	r2, r1
 80028b6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2201      	movs	r2, #1
 80028be:	4013      	ands	r3, r2
 80028c0:	d04c      	beq.n	800295c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d107      	bne.n	80028da <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ca:	4b44      	ldr	r3, [pc, #272]	@ (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	2380      	movs	r3, #128	@ 0x80
 80028d0:	029b      	lsls	r3, r3, #10
 80028d2:	4013      	ands	r3, r2
 80028d4:	d120      	bne.n	8002918 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e07a      	b.n	80029d0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d107      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e2:	4b3e      	ldr	r3, [pc, #248]	@ (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	2380      	movs	r3, #128	@ 0x80
 80028e8:	049b      	lsls	r3, r3, #18
 80028ea:	4013      	ands	r3, r2
 80028ec:	d114      	bne.n	8002918 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e06e      	b.n	80029d0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d107      	bne.n	800290a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028fa:	4b38      	ldr	r3, [pc, #224]	@ (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 80028fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028fe:	2380      	movs	r3, #128	@ 0x80
 8002900:	029b      	lsls	r3, r3, #10
 8002902:	4013      	ands	r3, r2
 8002904:	d108      	bne.n	8002918 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e062      	b.n	80029d0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290a:	4b34      	ldr	r3, [pc, #208]	@ (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2202      	movs	r2, #2
 8002910:	4013      	ands	r3, r2
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e05b      	b.n	80029d0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002918:	4b30      	ldr	r3, [pc, #192]	@ (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2203      	movs	r2, #3
 800291e:	4393      	bics	r3, r2
 8002920:	0019      	movs	r1, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	4b2d      	ldr	r3, [pc, #180]	@ (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 8002928:	430a      	orrs	r2, r1
 800292a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800292c:	f7fe f832 	bl	8000994 <HAL_GetTick>
 8002930:	0003      	movs	r3, r0
 8002932:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002934:	e009      	b.n	800294a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002936:	f7fe f82d 	bl	8000994 <HAL_GetTick>
 800293a:	0002      	movs	r2, r0
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	4a27      	ldr	r2, [pc, #156]	@ (80029e0 <HAL_RCC_ClockConfig+0x1a4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e042      	b.n	80029d0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	4b24      	ldr	r3, [pc, #144]	@ (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	220c      	movs	r2, #12
 8002950:	401a      	ands	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	429a      	cmp	r2, r3
 800295a:	d1ec      	bne.n	8002936 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800295c:	4b1e      	ldr	r3, [pc, #120]	@ (80029d8 <HAL_RCC_ClockConfig+0x19c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2201      	movs	r2, #1
 8002962:	4013      	ands	r3, r2
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d211      	bcs.n	800298e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296a:	4b1b      	ldr	r3, [pc, #108]	@ (80029d8 <HAL_RCC_ClockConfig+0x19c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2201      	movs	r2, #1
 8002970:	4393      	bics	r3, r2
 8002972:	0019      	movs	r1, r3
 8002974:	4b18      	ldr	r3, [pc, #96]	@ (80029d8 <HAL_RCC_ClockConfig+0x19c>)
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800297c:	4b16      	ldr	r3, [pc, #88]	@ (80029d8 <HAL_RCC_ClockConfig+0x19c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2201      	movs	r2, #1
 8002982:	4013      	ands	r3, r2
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d001      	beq.n	800298e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e020      	b.n	80029d0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2204      	movs	r2, #4
 8002994:	4013      	ands	r3, r2
 8002996:	d009      	beq.n	80029ac <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002998:	4b10      	ldr	r3, [pc, #64]	@ (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4a11      	ldr	r2, [pc, #68]	@ (80029e4 <HAL_RCC_ClockConfig+0x1a8>)
 800299e:	4013      	ands	r3, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	4b0d      	ldr	r3, [pc, #52]	@ (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 80029a8:	430a      	orrs	r2, r1
 80029aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029ac:	f000 f820 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 80029b0:	0001      	movs	r1, r0
 80029b2:	4b0a      	ldr	r3, [pc, #40]	@ (80029dc <HAL_RCC_ClockConfig+0x1a0>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	220f      	movs	r2, #15
 80029ba:	4013      	ands	r3, r2
 80029bc:	4a0a      	ldr	r2, [pc, #40]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ac>)
 80029be:	5cd3      	ldrb	r3, [r2, r3]
 80029c0:	000a      	movs	r2, r1
 80029c2:	40da      	lsrs	r2, r3
 80029c4:	4b09      	ldr	r3, [pc, #36]	@ (80029ec <HAL_RCC_ClockConfig+0x1b0>)
 80029c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80029c8:	2003      	movs	r0, #3
 80029ca:	f7fd ff9d 	bl	8000908 <HAL_InitTick>
  
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b004      	add	sp, #16
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40022000 	.word	0x40022000
 80029dc:	40021000 	.word	0x40021000
 80029e0:	00001388 	.word	0x00001388
 80029e4:	fffff8ff 	.word	0xfffff8ff
 80029e8:	08002dac 	.word	0x08002dac
 80029ec:	20000000 	.word	0x20000000

080029f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	2300      	movs	r3, #0
 8002a04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002a0a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	220c      	movs	r2, #12
 8002a14:	4013      	ands	r3, r2
 8002a16:	2b0c      	cmp	r3, #12
 8002a18:	d046      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xb8>
 8002a1a:	d848      	bhi.n	8002aae <HAL_RCC_GetSysClockFreq+0xbe>
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d002      	beq.n	8002a26 <HAL_RCC_GetSysClockFreq+0x36>
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d003      	beq.n	8002a2c <HAL_RCC_GetSysClockFreq+0x3c>
 8002a24:	e043      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a26:	4b27      	ldr	r3, [pc, #156]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a28:	613b      	str	r3, [r7, #16]
      break;
 8002a2a:	e043      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	0c9b      	lsrs	r3, r3, #18
 8002a30:	220f      	movs	r2, #15
 8002a32:	4013      	ands	r3, r2
 8002a34:	4a24      	ldr	r2, [pc, #144]	@ (8002ac8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002a36:	5cd3      	ldrb	r3, [r2, r3]
 8002a38:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002a3a:	4b21      	ldr	r3, [pc, #132]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3e:	220f      	movs	r2, #15
 8002a40:	4013      	ands	r3, r2
 8002a42:	4a22      	ldr	r2, [pc, #136]	@ (8002acc <HAL_RCC_GetSysClockFreq+0xdc>)
 8002a44:	5cd3      	ldrb	r3, [r2, r3]
 8002a46:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	23c0      	movs	r3, #192	@ 0xc0
 8002a4c:	025b      	lsls	r3, r3, #9
 8002a4e:	401a      	ands	r2, r3
 8002a50:	2380      	movs	r3, #128	@ 0x80
 8002a52:	025b      	lsls	r3, r3, #9
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d109      	bne.n	8002a6c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	481a      	ldr	r0, [pc, #104]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a5c:	f7fd fb54 	bl	8000108 <__udivsi3>
 8002a60:	0003      	movs	r3, r0
 8002a62:	001a      	movs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4353      	muls	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	e01a      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	23c0      	movs	r3, #192	@ 0xc0
 8002a70:	025b      	lsls	r3, r3, #9
 8002a72:	401a      	ands	r2, r3
 8002a74:	23c0      	movs	r3, #192	@ 0xc0
 8002a76:	025b      	lsls	r3, r3, #9
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d109      	bne.n	8002a90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	4814      	ldr	r0, [pc, #80]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002a80:	f7fd fb42 	bl	8000108 <__udivsi3>
 8002a84:	0003      	movs	r3, r0
 8002a86:	001a      	movs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4353      	muls	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	480c      	ldr	r0, [pc, #48]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a94:	f7fd fb38 	bl	8000108 <__udivsi3>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	001a      	movs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4353      	muls	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	613b      	str	r3, [r7, #16]
      break;
 8002aa6:	e005      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002aa8:	4b09      	ldr	r3, [pc, #36]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002aaa:	613b      	str	r3, [r7, #16]
      break;
 8002aac:	e002      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aae:	4b05      	ldr	r3, [pc, #20]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002ab0:	613b      	str	r3, [r7, #16]
      break;
 8002ab2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ab4:	693b      	ldr	r3, [r7, #16]
}
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b006      	add	sp, #24
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	46c0      	nop			@ (mov r8, r8)
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	007a1200 	.word	0x007a1200
 8002ac8:	08002dbc 	.word	0x08002dbc
 8002acc:	08002dcc 	.word	0x08002dcc
 8002ad0:	02dc6c00 	.word	0x02dc6c00

08002ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	2380      	movs	r3, #128	@ 0x80
 8002aea:	025b      	lsls	r3, r3, #9
 8002aec:	4013      	ands	r3, r2
 8002aee:	d100      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002af0:	e08e      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002af2:	2017      	movs	r0, #23
 8002af4:	183b      	adds	r3, r7, r0
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002afa:	4b6e      	ldr	r3, [pc, #440]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002afc:	69da      	ldr	r2, [r3, #28]
 8002afe:	2380      	movs	r3, #128	@ 0x80
 8002b00:	055b      	lsls	r3, r3, #21
 8002b02:	4013      	ands	r3, r2
 8002b04:	d110      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	4b6b      	ldr	r3, [pc, #428]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b08:	69da      	ldr	r2, [r3, #28]
 8002b0a:	4b6a      	ldr	r3, [pc, #424]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b0c:	2180      	movs	r1, #128	@ 0x80
 8002b0e:	0549      	lsls	r1, r1, #21
 8002b10:	430a      	orrs	r2, r1
 8002b12:	61da      	str	r2, [r3, #28]
 8002b14:	4b67      	ldr	r3, [pc, #412]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b16:	69da      	ldr	r2, [r3, #28]
 8002b18:	2380      	movs	r3, #128	@ 0x80
 8002b1a:	055b      	lsls	r3, r3, #21
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b22:	183b      	adds	r3, r7, r0
 8002b24:	2201      	movs	r2, #1
 8002b26:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b28:	4b63      	ldr	r3, [pc, #396]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	2380      	movs	r3, #128	@ 0x80
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	4013      	ands	r3, r2
 8002b32:	d11a      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b34:	4b60      	ldr	r3, [pc, #384]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4b5f      	ldr	r3, [pc, #380]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b3a:	2180      	movs	r1, #128	@ 0x80
 8002b3c:	0049      	lsls	r1, r1, #1
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b42:	f7fd ff27 	bl	8000994 <HAL_GetTick>
 8002b46:	0003      	movs	r3, r0
 8002b48:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4a:	e008      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4c:	f7fd ff22 	bl	8000994 <HAL_GetTick>
 8002b50:	0002      	movs	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	@ 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e0a6      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5e:	4b56      	ldr	r3, [pc, #344]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	2380      	movs	r3, #128	@ 0x80
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	4013      	ands	r3, r2
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b6a:	4b52      	ldr	r3, [pc, #328]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b6c:	6a1a      	ldr	r2, [r3, #32]
 8002b6e:	23c0      	movs	r3, #192	@ 0xc0
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4013      	ands	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d034      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	23c0      	movs	r3, #192	@ 0xc0
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4013      	ands	r3, r2
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d02c      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b8c:	4b49      	ldr	r3, [pc, #292]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	4a4a      	ldr	r2, [pc, #296]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b96:	4b47      	ldr	r3, [pc, #284]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b98:	6a1a      	ldr	r2, [r3, #32]
 8002b9a:	4b46      	ldr	r3, [pc, #280]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b9c:	2180      	movs	r1, #128	@ 0x80
 8002b9e:	0249      	lsls	r1, r1, #9
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ba4:	4b43      	ldr	r3, [pc, #268]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ba6:	6a1a      	ldr	r2, [r3, #32]
 8002ba8:	4b42      	ldr	r3, [pc, #264]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002baa:	4945      	ldr	r1, [pc, #276]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002bac:	400a      	ands	r2, r1
 8002bae:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bb0:	4b40      	ldr	r3, [pc, #256]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d013      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7fd fee9 	bl	8000994 <HAL_GetTick>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc6:	e009      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7fd fee4 	bl	8000994 <HAL_GetTick>
 8002bcc:	0002      	movs	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	4a3c      	ldr	r2, [pc, #240]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e067      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bdc:	4b35      	ldr	r3, [pc, #212]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	2202      	movs	r2, #2
 8002be2:	4013      	ands	r3, r2
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002be6:	4b33      	ldr	r3, [pc, #204]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	4a34      	ldr	r2, [pc, #208]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	0019      	movs	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	4b2f      	ldr	r3, [pc, #188]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bfa:	2317      	movs	r3, #23
 8002bfc:	18fb      	adds	r3, r7, r3
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d105      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c04:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c06:	69da      	ldr	r2, [r3, #28]
 8002c08:	4b2a      	ldr	r3, [pc, #168]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c0a:	492f      	ldr	r1, [pc, #188]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002c0c:	400a      	ands	r2, r1
 8002c0e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2201      	movs	r2, #1
 8002c16:	4013      	ands	r3, r2
 8002c18:	d009      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c1a:	4b26      	ldr	r3, [pc, #152]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	2203      	movs	r2, #3
 8002c20:	4393      	bics	r3, r2
 8002c22:	0019      	movs	r1, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	4b22      	ldr	r3, [pc, #136]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2202      	movs	r2, #2
 8002c34:	4013      	ands	r3, r2
 8002c36:	d009      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c38:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3c:	4a23      	ldr	r2, [pc, #140]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	0019      	movs	r1, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2220      	movs	r2, #32
 8002c52:	4013      	ands	r3, r2
 8002c54:	d009      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c56:	4b17      	ldr	r3, [pc, #92]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5a:	2210      	movs	r2, #16
 8002c5c:	4393      	bics	r3, r2
 8002c5e:	0019      	movs	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	4b13      	ldr	r3, [pc, #76]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c66:	430a      	orrs	r2, r1
 8002c68:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	2380      	movs	r3, #128	@ 0x80
 8002c70:	029b      	lsls	r3, r3, #10
 8002c72:	4013      	ands	r3, r2
 8002c74:	d009      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c76:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	2280      	movs	r2, #128	@ 0x80
 8002c7c:	4393      	bics	r3, r2
 8002c7e:	0019      	movs	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699a      	ldr	r2, [r3, #24]
 8002c84:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c86:	430a      	orrs	r2, r1
 8002c88:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	2380      	movs	r3, #128	@ 0x80
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4013      	ands	r3, r2
 8002c94:	d009      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c96:	4b07      	ldr	r3, [pc, #28]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9a:	2240      	movs	r2, #64	@ 0x40
 8002c9c:	4393      	bics	r3, r2
 8002c9e:	0019      	movs	r1, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	695a      	ldr	r2, [r3, #20]
 8002ca4:	4b03      	ldr	r3, [pc, #12]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	0018      	movs	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b006      	add	sp, #24
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40007000 	.word	0x40007000
 8002cbc:	fffffcff 	.word	0xfffffcff
 8002cc0:	fffeffff 	.word	0xfffeffff
 8002cc4:	00001388 	.word	0x00001388
 8002cc8:	efffffff 	.word	0xefffffff
 8002ccc:	fffcffff 	.word	0xfffcffff

08002cd0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002cd8:	4b09      	ldr	r3, [pc, #36]	@ (8002d00 <USB_DisableGlobalInt+0x30>)
 8002cda:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2240      	movs	r2, #64	@ 0x40
 8002ce0:	5a9b      	ldrh	r3, [r3, r2]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	b292      	uxth	r2, r2
 8002ce8:	43d2      	mvns	r2, r2
 8002cea:	b292      	uxth	r2, r2
 8002cec:	4013      	ands	r3, r2
 8002cee:	b299      	uxth	r1, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2240      	movs	r2, #64	@ 0x40
 8002cf4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b004      	add	sp, #16
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	0000bf80 	.word	0x0000bf80

08002d04 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	1d3b      	adds	r3, r7, #4
 8002d0e:	6019      	str	r1, [r3, #0]
 8002d10:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2240      	movs	r2, #64	@ 0x40
 8002d16:	2101      	movs	r1, #1
 8002d18:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2240      	movs	r2, #64	@ 0x40
 8002d1e:	2100      	movs	r1, #0
 8002d20:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2244      	movs	r2, #68	@ 0x44
 8002d26:	2100      	movs	r1, #0
 8002d28:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2250      	movs	r2, #80	@ 0x50
 8002d2e:	2100      	movs	r1, #0
 8002d30:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	0018      	movs	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b004      	add	sp, #16
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <memset>:
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	1882      	adds	r2, r0, r2
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d100      	bne.n	8002d46 <memset+0xa>
 8002d44:	4770      	bx	lr
 8002d46:	7019      	strb	r1, [r3, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	e7f9      	b.n	8002d40 <memset+0x4>

08002d4c <__libc_init_array>:
 8002d4c:	b570      	push	{r4, r5, r6, lr}
 8002d4e:	2600      	movs	r6, #0
 8002d50:	4c0c      	ldr	r4, [pc, #48]	@ (8002d84 <__libc_init_array+0x38>)
 8002d52:	4d0d      	ldr	r5, [pc, #52]	@ (8002d88 <__libc_init_array+0x3c>)
 8002d54:	1b64      	subs	r4, r4, r5
 8002d56:	10a4      	asrs	r4, r4, #2
 8002d58:	42a6      	cmp	r6, r4
 8002d5a:	d109      	bne.n	8002d70 <__libc_init_array+0x24>
 8002d5c:	2600      	movs	r6, #0
 8002d5e:	f000 f819 	bl	8002d94 <_init>
 8002d62:	4c0a      	ldr	r4, [pc, #40]	@ (8002d8c <__libc_init_array+0x40>)
 8002d64:	4d0a      	ldr	r5, [pc, #40]	@ (8002d90 <__libc_init_array+0x44>)
 8002d66:	1b64      	subs	r4, r4, r5
 8002d68:	10a4      	asrs	r4, r4, #2
 8002d6a:	42a6      	cmp	r6, r4
 8002d6c:	d105      	bne.n	8002d7a <__libc_init_array+0x2e>
 8002d6e:	bd70      	pop	{r4, r5, r6, pc}
 8002d70:	00b3      	lsls	r3, r6, #2
 8002d72:	58eb      	ldr	r3, [r5, r3]
 8002d74:	4798      	blx	r3
 8002d76:	3601      	adds	r6, #1
 8002d78:	e7ee      	b.n	8002d58 <__libc_init_array+0xc>
 8002d7a:	00b3      	lsls	r3, r6, #2
 8002d7c:	58eb      	ldr	r3, [r5, r3]
 8002d7e:	4798      	blx	r3
 8002d80:	3601      	adds	r6, #1
 8002d82:	e7f2      	b.n	8002d6a <__libc_init_array+0x1e>
 8002d84:	08002ddc 	.word	0x08002ddc
 8002d88:	08002ddc 	.word	0x08002ddc
 8002d8c:	08002de0 	.word	0x08002de0
 8002d90:	08002ddc 	.word	0x08002ddc

08002d94 <_init>:
 8002d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d96:	46c0      	nop			@ (mov r8, r8)
 8002d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d9a:	bc08      	pop	{r3}
 8002d9c:	469e      	mov	lr, r3
 8002d9e:	4770      	bx	lr

08002da0 <_fini>:
 8002da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da2:	46c0      	nop			@ (mov r8, r8)
 8002da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002da6:	bc08      	pop	{r3}
 8002da8:	469e      	mov	lr, r3
 8002daa:	4770      	bx	lr
